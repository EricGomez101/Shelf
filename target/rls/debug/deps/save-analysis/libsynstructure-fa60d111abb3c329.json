{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.0","prelude":{"crate_id":{"name":"synstructure","disambiguator":[4390419526903501473,16566581388535277887]},"crate_root":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src","external_crates":[{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[7046065364473614619,10056788711089334333]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[18045606665974499287,7370096489839769307]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[8940449385909834963,3306656639318091857]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[4650751871500514687,4336247883493526277]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[2671025247590627007,221811983110420441]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[8453567920792120947,9168909440481815743]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[18179531398593787271,9907519451984815572]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":8,"id":{"name":"alloc_jemalloc","disambiguator":[14986725973947038648,14534646976018034053]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":9,"id":{"name":"panic_unwind","disambiguator":[724428356685261056,12774823514128739995]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":10,"id":{"name":"proc_macro","disambiguator":[9163346393633161434,15079198821783884384]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":11,"id":{"name":"syntax","disambiguator":[9496070305345867800,18413438965747318221]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":12,"id":{"name":"bitflags","disambiguator":[8131023121933792161,6376848324981332648]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":13,"id":{"name":"serialize","disambiguator":[9193664055425775009,3586132068279433827]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":14,"id":{"name":"smallvec","disambiguator":[17648958398324463327,7662955023693579780]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":15,"id":{"name":"unreachable","disambiguator":[13851209065692303784,15429665311527467033]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":16,"id":{"name":"void","disambiguator":[10608305813596298699,9126097293915671461]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":17,"id":{"name":"log","disambiguator":[9220251309129749465,16996730369725518919]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":18,"id":{"name":"cfg_if","disambiguator":[15455508736952410107,6850141049720627572]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":19,"id":{"name":"rustc_errors","disambiguator":[6077261968996425950,2745401499989753327]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":20,"id":{"name":"atty","disambiguator":[17300115087377170419,9439671788444959001]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":21,"id":{"name":"libc","disambiguator":[14064602969960175584,8058590554157764816]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":22,"id":{"name":"termcolor","disambiguator":[7975892803340942000,10256851084041751244]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":23,"id":{"name":"rustc_data_structures","disambiguator":[15115349775306549024,10829236034003152184]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":24,"id":{"name":"ena","disambiguator":[12781038947529639349,12642735524192120694]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":25,"id":{"name":"parking_lot","disambiguator":[4112434664568186061,4062141088599968589]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":26,"id":{"name":"lock_api","disambiguator":[18279533191069566407,13647685441832281060]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":27,"id":{"name":"scopeguard","disambiguator":[10724199653612972957,14546413833811229949]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":28,"id":{"name":"owning_ref","disambiguator":[2419232495734483841,11117670775971466634]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":29,"id":{"name":"stable_deref_trait","disambiguator":[10196440233933547394,16633678996104326083]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":30,"id":{"name":"parking_lot_core","disambiguator":[572124087195633617,6726390253141719891]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":31,"id":{"name":"rand","disambiguator":[17404493110952669410,3757702786352730379]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":32,"id":{"name":"rand_core","disambiguator":[15851378787332983320,5779520168590038826]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":33,"id":{"name":"rustc_rayon","disambiguator":[11997826883341213568,11964086336858882666]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":34,"id":{"name":"rustc_rayon_core","disambiguator":[7241779660380610134,8390134523693529855]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":35,"id":{"name":"crossbeam_deque","disambiguator":[16082248962627161407,7574377015306086514]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":36,"id":{"name":"crossbeam_epoch","disambiguator":[16882417977236363923,11363626186168162350]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":37,"id":{"name":"nodrop","disambiguator":[10998816578826464920,12682438273483628420]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":38,"id":{"name":"arrayvec","disambiguator":[1169421316412256533,11688967829731022650]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":39,"id":{"name":"crossbeam_utils","disambiguator":[13445135907696850455,17424491349971667019]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":40,"id":{"name":"lazy_static","disambiguator":[13651521801810821020,3219231567095380099]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":41,"id":{"name":"memoffset","disambiguator":[16854104098053935046,4589059553287427355]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":42,"id":{"name":"num_cpus","disambiguator":[13403690101703627363,201896279391885841]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":43,"id":{"name":"rand","disambiguator":[10429166439413079701,7925513380398895755]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":44,"id":{"name":"either","disambiguator":[7159442929750194341,11502172860195313686]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":45,"id":{"name":"rustc_hash","disambiguator":[8650941369448140896,11676557787331419693]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":46,"id":{"name":"byteorder","disambiguator":[14496417987057524737,16528618907097311291]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":47,"id":{"name":"rustc_cratesio_shim","disambiguator":[4846907622735720912,15228116707297112925]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":48,"id":{"name":"unicode_width","disambiguator":[17054884087275490317,12709752910990296670]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":49,"id":{"name":"syntax_pos","disambiguator":[4210306526484221745,5207859969391944767]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":50,"id":{"name":"arena","disambiguator":[11874468434856353781,15572892531013755975]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":51,"id":{"name":"scoped_tls","disambiguator":[10049271534699512829,9228495197524053298]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":52,"id":{"name":"rustc_target","disambiguator":[14396061768821999914,14365648286794182943]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":53,"id":{"name":"proc_macro2","disambiguator":[13770371286559843162,1032698472486478128]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":54,"id":{"name":"unicode_xid","disambiguator":[4486723253222304210,16472615119798760569]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":55,"id":{"name":"quote","disambiguator":[1005405719850702474,6488670417082290800]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","num":56,"id":{"name":"syn","disambiguator":[5794932344464639699,278318640110527918]}}],"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":74693,"line_start":1,"line_end":2283,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5855,"byte_end":5856,"line_start":183,"line_end":183,"column_start":16,"column_end":17},"alias_span":null,"name":"*","value":"quote, quote_spanned, ToTokens","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":56,"index":4986},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,109,97,99,114,111,115,46,114,115],"byte_start":74978,"byte_end":74987,"line_start":6,"line_end":6,"column_start":15,"column_end":24},"alias_span":null,"name":"parse_str","value":"","parent":{"krate":0,"index":80}},{"kind":"Use","ref_id":{"krate":56,"index":4622},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,109,97,99,114,111,115,46,114,115],"byte_start":74989,"byte_end":74994,"line_start":6,"line_end":6,"column_start":26,"column_end":31},"alias_span":null,"name":"parse","value":"","parent":{"krate":0,"index":80}},{"kind":"Use","ref_id":{"krate":56,"index":13958},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,109,97,99,114,111,115,46,114,115],"byte_start":74996,"byte_end":75007,"line_start":6,"line_end":6,"column_start":33,"column_end":44},"alias_span":null,"name":"DeriveInput","value":"","parent":{"krate":0,"index":80}},{"kind":"Use","ref_id":{"krate":10,"index":630},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,109,97,99,114,111,115,46,114,115],"byte_start":75030,"byte_end":75041,"line_start":7,"line_end":7,"column_start":21,"column_end":32},"alias_span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,109,97,99,114,111,115,46,114,115],"byte_start":75045,"byte_end":75056,"line_start":7,"line_end":7,"column_start":36,"column_end":47},"name":"TokenStream","value":"","parent":{"krate":0,"index":80}},{"kind":"Use","ref_id":{"krate":53,"index":1120},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,109,97,99,114,111,115,46,114,115],"byte_start":75079,"byte_end":75090,"line_start":8,"line_end":8,"column_start":22,"column_end":33},"alias_span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,109,97,99,114,111,115,46,114,115],"byte_start":75094,"byte_end":75106,"line_start":8,"line_end":8,"column_start":37,"column_end":49},"name":"TokenStream2","value":"","parent":{"krate":0,"index":80}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":74693,"line_start":1,"line_end":2283,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":62},{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":226},{"krate":0,"index":246},{"krate":0,"index":244},{"krate":0,"index":240},{"krate":0,"index":236},{"krate":0,"index":232},{"krate":0,"index":228},{"krate":0,"index":250},{"krate":0,"index":270},{"krate":0,"index":268},{"krate":0,"index":264},{"krate":0,"index":260},{"krate":0,"index":256},{"krate":0,"index":252},{"krate":0,"index":98},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":274},{"krate":0,"index":294},{"krate":0,"index":290},{"krate":0,"index":284},{"krate":0,"index":280},{"krate":0,"index":276},{"krate":0,"index":110},{"krate":0,"index":114},{"krate":0,"index":298},{"krate":0,"index":320},{"krate":0,"index":318},{"krate":0,"index":314},{"krate":0,"index":308},{"krate":0,"index":304},{"krate":0,"index":300},{"krate":0,"index":324},{"krate":0,"index":344},{"krate":0,"index":340},{"krate":0,"index":334},{"krate":0,"index":330},{"krate":0,"index":326},{"krate":0,"index":122},{"krate":0,"index":132},{"krate":0,"index":348},{"krate":0,"index":368},{"krate":0,"index":364},{"krate":0,"index":358},{"krate":0,"index":354},{"krate":0,"index":350},{"krate":0,"index":162},{"krate":0,"index":224}],"decl_id":null,"docs":" This crate provides helper types for matching against enum variants, and\n extracting bindings to each of the fields in the deriving Struct or Enum in\n a generic way.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":80},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,109,97,99,114,111,115,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"macros","qualname":"::macros","value":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.1/src/macros.rs","parent":null,"children":[{"krate":0,"index":82},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":96}],"decl_id":null,"docs":" This module provides two utility macros for testing custom derives. They can\n be used together to eliminate some of the boilerplate required in order to\n declare and test custom derive implementations.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":125},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6335,"byte_end":6339,"line_start":200,"line_end":200,"column_start":5,"column_end":9},"name":"Both","qualname":"::AddBounds::Both","value":"AddBounds::Both","parent":{"krate":0,"index":226},"children":[],"decl_id":null,"docs":" Add for fields and generics\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":127},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6365,"byte_end":6371,"line_start":202,"line_end":202,"column_start":5,"column_end":11},"name":"Fields","qualname":"::AddBounds::Fields","value":"AddBounds::Fields","parent":{"krate":0,"index":226},"children":[],"decl_id":null,"docs":" Fields only\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":129},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6399,"byte_end":6407,"line_start":204,"line_end":204,"column_start":5,"column_end":13},"name":"Generics","qualname":"::AddBounds::Generics","value":"AddBounds::Generics","parent":{"krate":0,"index":226},"children":[],"decl_id":null,"docs":" Generics only\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":131},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6426,"byte_end":6430,"line_start":206,"line_end":206,"column_start":5,"column_end":9},"name":"None","qualname":"::AddBounds::None","value":"AddBounds::None","parent":{"krate":0,"index":226},"children":[],"decl_id":null,"docs":" None\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":133},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6455,"byte_end":6470,"line_start":208,"line_end":208,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::AddBounds::__Nonexhaustive","value":"AddBounds::__Nonexhaustive","parent":{"krate":0,"index":226},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":226},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6283,"byte_end":6292,"line_start":198,"line_end":198,"column_start":10,"column_end":19},"name":"AddBounds","qualname":"::AddBounds","value":"AddBounds::{Both, Fields, Generics, None, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":125},{"krate":0,"index":127},{"krate":0,"index":129},{"krate":0,"index":131},{"krate":0,"index":133}],"decl_id":null,"docs":" Changes how bounds are added\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6274,"byte_end":6473,"line_start":198,"line_end":209,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6274,"byte_end":6473,"line_start":198,"line_end":209,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":137},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6621,"byte_end":6625,"line_start":215,"line_end":215,"column_start":5,"column_end":9},"name":"Move","qualname":"::BindStyle::Move","value":"BindStyle::Move","parent":{"krate":0,"index":250},"children":[],"decl_id":null,"docs":" `x`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":139},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6647,"byte_end":6654,"line_start":217,"line_end":217,"column_start":5,"column_end":12},"name":"MoveMut","qualname":"::BindStyle::MoveMut","value":"BindStyle::MoveMut","parent":{"krate":0,"index":250},"children":[],"decl_id":null,"docs":" `mut x`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":141},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6676,"byte_end":6679,"line_start":219,"line_end":219,"column_start":5,"column_end":8},"name":"Ref","qualname":"::BindStyle::Ref","value":"BindStyle::Ref","parent":{"krate":0,"index":250},"children":[],"decl_id":null,"docs":" `ref x`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":143},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6705,"byte_end":6711,"line_start":221,"line_end":221,"column_start":5,"column_end":11},"name":"RefMut","qualname":"::BindStyle::RefMut","value":"BindStyle::RefMut","parent":{"krate":0,"index":250},"children":[],"decl_id":null,"docs":" `ref mut x`\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":250},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6593,"byte_end":6602,"line_start":213,"line_end":213,"column_start":10,"column_end":19},"name":"BindStyle","qualname":"::BindStyle","value":"BindStyle::{Move, MoveMut, Ref, RefMut}","parent":null,"children":[{"krate":0,"index":137},{"krate":0,"index":139},{"krate":0,"index":141},{"krate":0,"index":143}],"decl_id":null,"docs":" The type of binding to use when generating a pattern.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6584,"byte_end":6714,"line_start":213,"line_end":222,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6584,"byte_end":6714,"line_start":213,"line_end":222,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":274},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10191,"byte_end":10202,"line_start":313,"line_end":313,"column_start":12,"column_end":23},"name":"BindingInfo","qualname":"::BindingInfo","value":"BindingInfo { binding, style }","parent":null,"children":[{"krate":0,"index":149},{"krate":0,"index":151},{"krate":0,"index":153},{"krate":0,"index":155},{"krate":0,"index":157}],"decl_id":null,"docs":" Information about a specific binding. This contains both an `Ident`\n reference to the given field, and the syn `&'a Field` descriptor for that\n field.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10180,"byte_end":10533,"line_start":313,"line_end":325,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":149},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10271,"byte_end":10278,"line_start":315,"line_end":315,"column_start":9,"column_end":16},"name":"binding","qualname":"::BindingInfo::binding","value":"proc_macro2::Ident","parent":{"krate":0,"index":274},"children":[],"decl_id":null,"docs":" The name which this BindingInfo will bind to.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":151},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10360,"byte_end":10365,"line_start":318,"line_end":318,"column_start":9,"column_end":14},"name":"style","qualname":"::BindingInfo::style","value":"BindStyle","parent":{"krate":0,"index":274},"children":[],"decl_id":null,"docs":" The type of binding which this BindingInfo will create.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10819,"byte_end":10822,"line_start":336,"line_end":336,"column_start":12,"column_end":15},"name":"ast","qualname":"<BindingInfo<'a>>::ast","value":"fn (&self) -> &'a Field","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying `syn` AST node which this\n `BindingInfo` references\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11554,"byte_end":11557,"line_start":365,"line_end":365,"column_start":12,"column_end":15},"name":"pat","qualname":"<BindingInfo<'a>>::pat","value":"fn (&self) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Generates the pattern fragment for this field binding.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12715,"byte_end":12735,"line_start":405,"line_end":405,"column_start":12,"column_end":32},"name":"referenced_ty_params","qualname":"<BindingInfo<'a>>::referenced_ty_params","value":"fn (&self) -> Vec<&'a Ident>","parent":null,"children":[],"decl_id":null,"docs":" Returns a list of the type parameters which are referenced in this\n field's type.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":298},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13197,"byte_end":13207,"line_start":415,"line_end":415,"column_start":12,"column_end":22},"name":"VariantAst","qualname":"::VariantAst","value":"VariantAst { attrs, ident, fields, discriminant }","parent":null,"children":[{"krate":0,"index":173},{"krate":0,"index":175},{"krate":0,"index":177},{"krate":0,"index":179}],"decl_id":null,"docs":" This type is similar to `syn`'s `Variant` type, however each of the fields\n are references rather than owned. When this is used as the AST for a real\n variant, this struct simply borrows the fields of the `syn::Variant`,\n however this type may also be used as the sole variant for a struct.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13186,"byte_end":13354,"line_start":415,"line_end":420,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13186,"byte_end":13354,"line_start":415,"line_end":420,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":173},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13222,"byte_end":13227,"line_start":416,"line_end":416,"column_start":9,"column_end":14},"name":"attrs","qualname":"::VariantAst::attrs","value":"&'a [syn::Attribute]","parent":{"krate":0,"index":298},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":175},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13254,"byte_end":13259,"line_start":417,"line_end":417,"column_start":9,"column_end":14},"name":"ident","qualname":"::VariantAst::ident","value":"&'a proc_macro2::Ident","parent":{"krate":0,"index":298},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":177},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13280,"byte_end":13286,"line_start":418,"line_end":418,"column_start":9,"column_end":15},"name":"fields","qualname":"::VariantAst::fields","value":"&'a syn::Fields","parent":{"krate":0,"index":298},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":179},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13308,"byte_end":13320,"line_start":419,"line_end":419,"column_start":9,"column_end":21},"name":"discriminant","qualname":"::VariantAst::discriminant","value":"&'a std::option::Option<(syn::token::Eq, syn::Expr)>","parent":{"krate":0,"index":298},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":324},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13548,"byte_end":13559,"line_start":425,"line_end":425,"column_start":12,"column_end":23},"name":"VariantInfo","qualname":"::VariantInfo","value":"VariantInfo { prefix }","parent":null,"children":[{"krate":0,"index":197},{"krate":0,"index":199},{"krate":0,"index":201},{"krate":0,"index":203},{"krate":0,"index":205}],"decl_id":null,"docs":" A wrapper around a `syn::DeriveInput`'s variant which provides utilities\n for destructuring `Variant`s with `match` expressions.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13537,"byte_end":13717,"line_start":425,"line_end":431,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":197},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13574,"byte_end":13580,"line_start":426,"line_end":426,"column_start":9,"column_end":15},"name":"prefix","qualname":"::VariantInfo::prefix","value":"std::option::Option<&'a proc_macro2::Ident>","parent":{"krate":0,"index":324},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16638,"byte_end":16646,"line_start":513,"line_end":513,"column_start":12,"column_end":20},"name":"bindings","qualname":"<VariantInfo<'a>>::bindings","value":"fn (&self) -> &[BindingInfo<'a>]","parent":null,"children":[],"decl_id":null,"docs":" Returns a slice of the bindings in this Variant.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16780,"byte_end":16792,"line_start":518,"line_end":518,"column_start":12,"column_end":24},"name":"bindings_mut","qualname":"<VariantInfo<'a>>::bindings_mut","value":"fn (&mut self) -> &mut [BindingInfo<'a>]","parent":null,"children":[],"decl_id":null,"docs":" Returns a mut slice of the bindings in this Variant.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17021,"byte_end":17024,"line_start":524,"line_end":524,"column_start":12,"column_end":15},"name":"ast","qualname":"<VariantInfo<'a>>::ast","value":"fn (&self) -> VariantAst<'a>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `VariantAst` object which contains references to the\n underlying `syn` AST node which this `Variant` was created from.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17153,"byte_end":17169,"line_start":529,"line_end":529,"column_start":12,"column_end":28},"name":"omitted_bindings","qualname":"<VariantInfo<'a>>::omitted_bindings","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" True if any bindings were omitted due to a `filter` call.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17934,"byte_end":17937,"line_start":558,"line_end":558,"column_start":12,"column_end":15},"name":"pat","qualname":"<VariantInfo<'a>>::pat","value":"fn (&self) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Generates the match-arm pattern which could be used to match against this Variant.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20347,"byte_end":20356,"line_start":634,"line_end":634,"column_start":12,"column_end":21},"name":"construct","qualname":"<VariantInfo<'a>>::construct","value":"fn <F, T> (&self, mut func: F) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Generates the token stream required to construct the current variant.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22622,"byte_end":22626,"line_start":702,"line_end":702,"column_start":12,"column_end":16},"name":"each","qualname":"<VariantInfo<'a>>::each","value":"fn <F, R> (&self, mut f: F) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Runs the passed-in function once for each bound field, passing in a `BindingInfo`.\n and generating a `match` arm which evaluates the returned tokens.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24082,"byte_end":24086,"line_start":750,"line_end":750,"column_start":12,"column_end":16},"name":"fold","qualname":"<VariantInfo<'a>>::fold","value":"fn <F, I, R> (&self, init: I, mut f: F) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Runs the passed-in function once for each bound field, passing in the\n result of the previous call, and a `BindingInfo`. generating a `match`\n arm which evaluates to the resulting tokens.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25899,"byte_end":25905,"line_start":807,"line_end":807,"column_start":12,"column_end":18},"name":"filter","qualname":"<VariantInfo<'a>>::filter","value":"fn <F> (&mut self, f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Filter the bindings created by this `Variant` object. This has 2 effects:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":26327,"byte_end":26341,"line_start":824,"line_end":824,"column_start":12,"column_end":26},"name":"remove_binding","qualname":"<VariantInfo<'a>>::remove_binding","value":"fn (&mut self, idx: usize) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Remove the binding at the given index.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27582,"byte_end":27591,"line_start":865,"line_end":865,"column_start":12,"column_end":21},"name":"bind_with","qualname":"<VariantInfo<'a>>::bind_with","value":"fn <F> (&mut self, mut f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Updates the `BindStyle` for each of the passed-in fields by calling the\n passed-in function for each `BindingInfo`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":29133,"byte_end":29145,"line_start":916,"line_end":916,"column_start":12,"column_end":24},"name":"binding_name","qualname":"<VariantInfo<'a>>::binding_name","value":"fn <F> (&mut self, mut f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Updates the binding name for each fo the passed-in fields by calling the\n passed-in function for each `BindingInfo`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30377,"byte_end":30397,"line_start":957,"line_end":957,"column_start":12,"column_end":32},"name":"referenced_ty_params","qualname":"<VariantInfo<'a>>::referenced_ty_params","value":"fn (&self) -> Vec<&'a Ident>","parent":null,"children":[],"decl_id":null,"docs":" Returns a list of the type parameters which are referenced in this\n field's type.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":348},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30806,"byte_end":30815,"line_start":969,"line_end":969,"column_start":12,"column_end":21},"name":"Structure","qualname":"::Structure","value":"Structure {  }","parent":null,"children":[{"krate":0,"index":221},{"krate":0,"index":223},{"krate":0,"index":225},{"krate":0,"index":227},{"krate":0,"index":229}],"decl_id":null,"docs":" A wrapper around a `syn::DeriveInput` which provides utilities for creating\n custom derive trait implementations.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30795,"byte_end":30975,"line_start":969,"line_end":975,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":31117,"byte_end":31120,"line_start":980,"line_end":980,"column_start":12,"column_end":15},"name":"new","qualname":"<Structure<'a>>::new","value":"fn (ast: &'a DeriveInput) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Structure` with the variants and fields from the passed-in\n `DeriveInput`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33344,"byte_end":33352,"line_start":1037,"line_end":1037,"column_start":12,"column_end":20},"name":"variants","qualname":"<Structure<'a>>::variants","value":"fn (&self) -> &[VariantInfo<'a>]","parent":null,"children":[],"decl_id":null,"docs":" Returns a slice of the variants in this Structure.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33488,"byte_end":33500,"line_start":1042,"line_end":1042,"column_start":12,"column_end":24},"name":"variants_mut","qualname":"<Structure<'a>>::variants_mut","value":"fn (&mut self) -> &mut [VariantInfo<'a>]","parent":null,"children":[],"decl_id":null,"docs":" Returns a mut slice of the variants in this Structure.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33695,"byte_end":33698,"line_start":1048,"line_end":1048,"column_start":12,"column_end":15},"name":"ast","qualname":"<Structure<'a>>::ast","value":"fn (&self) -> &'a DeriveInput","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying `syn` AST node which this\n `Structure` was created from.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33837,"byte_end":33853,"line_start":1053,"line_end":1053,"column_start":12,"column_end":28},"name":"omitted_variants","qualname":"<Structure<'a>>::omitted_variants","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" True if any variants were omitted due to a `filter_variants` call.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35104,"byte_end":35108,"line_start":1093,"line_end":1093,"column_start":12,"column_end":16},"name":"each","qualname":"<Structure<'a>>::each","value":"fn <F, R> (&self, mut f: F) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Runs the passed-in function once for each bound field, passing in a `BindingInfo`.\n and generating `match` arms which evaluate the returned tokens.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":36722,"byte_end":36726,"line_start":1146,"line_end":1146,"column_start":12,"column_end":16},"name":"fold","qualname":"<Structure<'a>>::fold","value":"fn <F, I, R> (&self, init: I, mut f: F) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Runs the passed-in function once for each bound field, passing in the\n result of the previous call, and a `BindingInfo`. generating `match`\n arms which evaluate to the resulting tokens.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":38374,"byte_end":38386,"line_start":1201,"line_end":1201,"column_start":12,"column_end":24},"name":"each_variant","qualname":"<Structure<'a>>::each_variant","value":"fn <F, R> (&self, mut f: F) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Runs the passed-in function once for each variant, passing in a\n `VariantInfo`. and generating `match` arms which evaluate the returned\n tokens.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":40261,"byte_end":40267,"line_start":1261,"line_end":1261,"column_start":12,"column_end":18},"name":"filter","qualname":"<Structure<'a>>::filter","value":"fn <F> (&mut self, mut f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Filter the bindings created by this `Structure` object. This has 2 effects:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":41849,"byte_end":41859,"line_start":1314,"line_end":1314,"column_start":12,"column_end":22},"name":"add_bounds","qualname":"<Structure<'a>>::add_bounds","value":"fn (&mut self, mode: AddBounds) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Specify which bounds should be generated by impl-generating functions\n such as `gen_impl`, `bound_impl`, and `unsafe_bound_impl`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":43172,"byte_end":43187,"line_start":1358,"line_end":1358,"column_start":12,"column_end":27},"name":"filter_variants","qualname":"<Structure<'a>>::filter_variants","value":"fn <F> (&mut self, f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Filter the variants matched by this `Structure` object. This has 2 effects:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":43611,"byte_end":43625,"line_start":1375,"line_end":1375,"column_start":12,"column_end":26},"name":"remove_variant","qualname":"<Structure<'a>>::remove_variant","value":"fn (&mut self, idx: usize) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Remove the variant at the given index.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":44854,"byte_end":44863,"line_start":1416,"line_end":1416,"column_start":12,"column_end":21},"name":"bind_with","qualname":"<Structure<'a>>::bind_with","value":"fn <F> (&mut self, mut f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Updates the `BindStyle` for each of the passed-in fields by calling the\n passed-in function for each `BindingInfo`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":46365,"byte_end":46377,"line_start":1467,"line_end":1467,"column_start":12,"column_end":24},"name":"binding_name","qualname":"<Structure<'a>>::binding_name","value":"fn <F> (&mut self, mut f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Updates the binding name for each fo the passed-in fields by calling the\n passed-in function for each `BindingInfo`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":47637,"byte_end":47657,"line_start":1510,"line_end":1510,"column_start":12,"column_end":32},"name":"referenced_ty_params","qualname":"<Structure<'a>>::referenced_ty_params","value":"fn (&self) -> Vec<&'a Ident>","parent":null,"children":[],"decl_id":null,"docs":" Returns a list of the type parameters which are refrenced in the types\n of non-filtered fields / variants.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":49420,"byte_end":49436,"line_start":1563,"line_end":1563,"column_start":12,"column_end":28},"name":"add_impl_generic","qualname":"<Structure<'a>>::add_impl_generic","value":"fn (&mut self, param: GenericParam) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Adds an `impl<>` generic parameter.\n This can be used when the trait to be derived needs some extra generic parameters.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":49923,"byte_end":49939,"line_start":1576,"line_end":1576,"column_start":12,"column_end":28},"name":"add_trait_bounds","qualname":"<Structure<'a>>::add_trait_bounds","value":"fn (&self, bound: &TraitBound, where_clause: &mut Option<WhereClause>, mode: AddBounds) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add trait bounds for a trait with the given path for each type parmaeter\n referenced in the types of non-filtered fields.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":54463,"byte_end":54473,"line_start":1702,"line_end":1702,"column_start":12,"column_end":22},"name":"bound_impl","qualname":"<Structure<'a>>::bound_impl","value":"fn <P, B> (&self, path: P, body: B) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" > NOTE: This methods' features are superceded by `Structure::gen_impl`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":57066,"byte_end":57083,"line_start":1776,"line_end":1776,"column_start":12,"column_end":29},"name":"unsafe_bound_impl","qualname":"<Structure<'a>>::unsafe_bound_impl","value":"fn <P, B> (&self, path: P, body: B) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" > NOTE: This methods' features are superceded by `Structure::gen_impl`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":59235,"byte_end":59247,"line_start":1840,"line_end":1840,"column_start":12,"column_end":24},"name":"unbound_impl","qualname":"<Structure<'a>>::unbound_impl","value":"fn <P, B> (&self, path: P, body: B) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" > NOTE: This methods' features are superceded by `Structure::gen_impl`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":61449,"byte_end":61468,"line_start":1905,"line_end":1905,"column_start":12,"column_end":31},"name":"unsafe_unbound_impl","qualname":"<Structure<'a>>::unsafe_unbound_impl","value":"fn <P, B> (&self, path: P, body: B) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" > NOTE: This methods' features are superceded by `Structure::gen_impl`.","sig":null,"attributes":[{"value":"deprecated","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":61424,"byte_end":61437,"line_start":1904,"line_end":1904,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":69766,"byte_end":69774,"line_start":2130,"line_end":2130,"column_start":12,"column_end":20},"name":"gen_impl","qualname":"<Structure<'a>>::gen_impl","value":"fn (&self, cfg: TokenStream) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Generate an impl block for the given struct. This impl block will\n automatically use hygiene tricks to avoid polluting the caller's\n namespace, and will automatically add trait bounds for generic type\n parameters.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":224},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":74082,"byte_end":74096,"line_start":2262,"line_end":2262,"column_start":8,"column_end":22},"name":"unpretty_print","qualname":"::unpretty_print","value":"fn <T> (ts: T) -> String","parent":null,"children":[],"decl_id":null,"docs":" Dumps an unpretty version of a tokenstream. Takes any type which implements\n `Display`.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6734,"byte_end":6743,"line_start":224,"line_end":224,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10557,"byte_end":10568,"line_start":327,"line_end":327,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10685,"byte_end":10696,"line_start":333,"line_end":333,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":120}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14224,"byte_end":14240,"line_start":444,"line_end":444,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":128},{"krate":0,"index":130}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15237,"byte_end":15248,"line_start":477,"line_end":477,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30986,"byte_end":30995,"line_start":977,"line_end":977,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":178},{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":186},{"krate":0,"index":188},{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":206},{"krate":0,"index":208},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32315,"byte_end":32329,"line_start":1005,"line_end":1005,"column_start":38,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6181,"byte_end":6187,"line_start":194,"line_end":194,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":80}}],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6734,"byte_end":6743,"line_start":224,"line_end":224,"column_start":19,"column_end":28},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":250},"to":{"krate":55,"index":76}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10557,"byte_end":10568,"line_start":327,"line_end":327,"column_start":23,"column_end":34},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":274},"to":{"krate":55,"index":76}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10685,"byte_end":10696,"line_start":333,"line_end":333,"column_start":10,"column_end":21},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":274},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14224,"byte_end":14240,"line_start":444,"line_end":444,"column_start":28,"column_end":44},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":124},"to":{"krate":56,"index":3656}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15237,"byte_end":15248,"line_start":477,"line_end":477,"column_start":10,"column_end":21},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":324},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30986,"byte_end":30995,"line_start":977,"line_end":977,"column_start":10,"column_end":19},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":348},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32315,"byte_end":32329,"line_start":1005,"line_end":1005,"column_start":38,"column_end":52},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":166},"to":{"krate":2,"index":1650}}]}