{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.0","prelude":{"crate_id":{"name":"flate2","disambiguator":[9331536182649446114,17991292068648406070]},"crate_root":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.4/src","external_crates":[{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.4/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[7046065364473614619,10056788711089334333]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.4/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[18045606665974499287,7370096489839769307]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.4/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[8940449385909834963,3306656639318091857]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.4/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[4650751871500514687,4336247883493526277]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.4/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[2671025247590627007,221811983110420441]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.4/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[8453567920792120947,9168909440481815743]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.4/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[18179531398593787271,9907519451984815572]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.4/src/lib.rs","num":8,"id":{"name":"alloc_jemalloc","disambiguator":[14986725973947038648,14534646976018034053]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.4/src/lib.rs","num":9,"id":{"name":"panic_unwind","disambiguator":[724428356685261056,12774823514128739995]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.4/src/lib.rs","num":10,"id":{"name":"libc","disambiguator":[16959940114727513389,4435599347966142126]}},{"file_name":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.4/src/ffi.rs","num":11,"id":{"name":"miniz_sys","disambiguator":[11329979508065276496,13091776333418874708]}}],"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":7797,"line_start":1,"line_end":234,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1412},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4047,"byte_end":4056,"line_start":110,"line_end":110,"column_start":13,"column_end":22},"alias_span":null,"name":"GzBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1396},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4070,"byte_end":4078,"line_start":111,"line_end":111,"column_start":13,"column_end":21},"alias_span":null,"name":"GzHeader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1424},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4094,"byte_end":4102,"line_start":112,"line_end":112,"column_start":15,"column_end":23},"alias_span":null,"name":"Compress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1510},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4104,"byte_end":4117,"line_start":112,"line_end":112,"column_start":25,"column_end":38},"alias_span":null,"name":"CompressError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1430},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4119,"byte_end":4129,"line_start":112,"line_end":112,"column_start":40,"column_end":50},"alias_span":null,"name":"Decompress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1504},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4131,"byte_end":4146,"line_start":112,"line_end":112,"column_start":52,"column_end":67},"alias_span":null,"name":"DecompressError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1516},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4148,"byte_end":4154,"line_start":112,"line_end":112,"column_start":69,"column_end":75},"alias_span":null,"name":"Status","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1454},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4171,"byte_end":4184,"line_start":113,"line_end":113,"column_start":15,"column_end":28},"alias_span":null,"name":"FlushCompress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1474},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4186,"byte_end":4201,"line_start":113,"line_end":113,"column_start":30,"column_end":45},"alias_span":null,"name":"FlushDecompress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1294},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4218,"byte_end":4221,"line_start":114,"line_end":114,"column_start":15,"column_end":18},"alias_span":null,"name":"Crc","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1300},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4223,"byte_end":4232,"line_start":114,"line_end":114,"column_start":20,"column_end":29},"alias_span":null,"name":"CrcReader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1306},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4234,"byte_end":4243,"line_start":114,"line_end":114,"column_start":31,"column_end":40},"alias_span":null,"name":"CrcWriter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1324},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4538,"byte_end":4552,"line_start":130,"line_end":130,"column_start":28,"column_end":42},"alias_span":null,"name":"DeflateEncoder","value":"","parent":{"krate":0,"index":1228}},{"kind":"Use","ref_id":{"krate":0,"index":1330},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4581,"byte_end":4595,"line_start":131,"line_end":131,"column_start":28,"column_end":42},"alias_span":null,"name":"DeflateDecoder","value":"","parent":{"krate":0,"index":1228}},{"kind":"Use","ref_id":{"krate":0,"index":1548},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4621,"byte_end":4632,"line_start":132,"line_end":132,"column_start":25,"column_end":36},"alias_span":null,"name":"ZlibEncoder","value":"","parent":{"krate":0,"index":1228}},{"kind":"Use","ref_id":{"krate":0,"index":1554},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4658,"byte_end":4669,"line_start":133,"line_end":133,"column_start":25,"column_end":36},"alias_span":null,"name":"ZlibDecoder","value":"","parent":{"krate":0,"index":1228}},{"kind":"Use","ref_id":{"krate":0,"index":1366},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4693,"byte_end":4702,"line_start":134,"line_end":134,"column_start":23,"column_end":32},"alias_span":null,"name":"GzEncoder","value":"","parent":{"krate":0,"index":1228}},{"kind":"Use","ref_id":{"krate":0,"index":1372},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4726,"byte_end":4735,"line_start":135,"line_end":135,"column_start":23,"column_end":32},"alias_span":null,"name":"GzDecoder","value":"","parent":{"krate":0,"index":1228}},{"kind":"Use","ref_id":{"krate":0,"index":1378},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4759,"byte_end":4773,"line_start":136,"line_end":136,"column_start":23,"column_end":37},"alias_span":null,"name":"MultiGzDecoder","value":"","parent":{"krate":0,"index":1228}},{"kind":"Use","ref_id":{"krate":0,"index":1336},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4991,"byte_end":5005,"line_start":144,"line_end":144,"column_start":29,"column_end":43},"alias_span":null,"name":"DeflateEncoder","value":"","parent":{"krate":0,"index":1244}},{"kind":"Use","ref_id":{"krate":0,"index":1342},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5035,"byte_end":5049,"line_start":145,"line_end":145,"column_start":29,"column_end":43},"alias_span":null,"name":"DeflateDecoder","value":"","parent":{"krate":0,"index":1244}},{"kind":"Use","ref_id":{"krate":0,"index":1560},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5076,"byte_end":5087,"line_start":146,"line_end":146,"column_start":26,"column_end":37},"alias_span":null,"name":"ZlibEncoder","value":"","parent":{"krate":0,"index":1244}},{"kind":"Use","ref_id":{"krate":0,"index":1566},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5114,"byte_end":5125,"line_start":147,"line_end":147,"column_start":26,"column_end":37},"alias_span":null,"name":"ZlibDecoder","value":"","parent":{"krate":0,"index":1244}},{"kind":"Use","ref_id":{"krate":0,"index":1384},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5150,"byte_end":5159,"line_start":148,"line_end":148,"column_start":24,"column_end":33},"alias_span":null,"name":"GzEncoder","value":"","parent":{"krate":0,"index":1244}},{"kind":"Use","ref_id":{"krate":0,"index":1390},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5184,"byte_end":5193,"line_start":149,"line_end":149,"column_start":24,"column_end":33},"alias_span":null,"name":"GzDecoder","value":"","parent":{"krate":0,"index":1244}},{"kind":"Use","ref_id":{"krate":0,"index":1312},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5421,"byte_end":5435,"line_start":157,"line_end":157,"column_start":31,"column_end":45},"alias_span":null,"name":"DeflateEncoder","value":"","parent":{"krate":0,"index":1258}},{"kind":"Use","ref_id":{"krate":0,"index":1318},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5467,"byte_end":5481,"line_start":158,"line_end":158,"column_start":31,"column_end":45},"alias_span":null,"name":"DeflateDecoder","value":"","parent":{"krate":0,"index":1258}},{"kind":"Use","ref_id":{"krate":0,"index":1536},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5510,"byte_end":5521,"line_start":159,"line_end":159,"column_start":28,"column_end":39},"alias_span":null,"name":"ZlibEncoder","value":"","parent":{"krate":0,"index":1258}},{"kind":"Use","ref_id":{"krate":0,"index":1542},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5550,"byte_end":5561,"line_start":160,"line_end":160,"column_start":28,"column_end":39},"alias_span":null,"name":"ZlibDecoder","value":"","parent":{"krate":0,"index":1258}},{"kind":"Use","ref_id":{"krate":0,"index":1348},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5588,"byte_end":5597,"line_start":161,"line_end":161,"column_start":26,"column_end":35},"alias_span":null,"name":"GzEncoder","value":"","parent":{"krate":0,"index":1258}},{"kind":"Use","ref_id":{"krate":0,"index":1354},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5624,"byte_end":5633,"line_start":162,"line_end":162,"column_start":26,"column_end":35},"alias_span":null,"name":"GzDecoder","value":"","parent":{"krate":0,"index":1258}},{"kind":"Use","ref_id":{"krate":0,"index":1360},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5660,"byte_end":5674,"line_start":163,"line_end":163,"column_start":26,"column_end":40},"alias_span":null,"name":"MultiGzDecoder","value":"","parent":{"krate":0,"index":1258}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":7797,"line_start":1,"line_end":234,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":24},{"krate":0,"index":30},{"krate":0,"index":38},{"krate":0,"index":80},{"krate":0,"index":152},{"krate":0,"index":372},{"krate":0,"index":428},{"krate":0,"index":796},{"krate":0,"index":910},{"krate":0,"index":1010},{"krate":0,"index":1228},{"krate":0,"index":1244},{"krate":0,"index":1258},{"krate":0,"index":1274},{"krate":0,"index":1572},{"krate":0,"index":1592},{"krate":0,"index":1588},{"krate":0,"index":1582},{"krate":0,"index":1578},{"krate":0,"index":1574},{"krate":0,"index":1278},{"krate":0,"index":1290}],"decl_id":null,"docs":" A DEFLATE-based stream compression/decompression library","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3054,"byte_end":3076,"line_start":77,"line_end":77,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3077,"byte_end":3116,"line_start":78,"line_end":78,"column_start":1,"column_end":40}},{"value":"allow(trivial_numeric_casts)","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3117,"byte_end":3149,"line_start":79,"line_end":79,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":1294},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,99,114,99,46,114,115],"byte_start":10812,"byte_end":10815,"line_start":13,"line_end":13,"column_start":12,"column_end":15},"name":"Crc","qualname":"::crc::Crc","value":"Crc {  }","parent":null,"children":[{"krate":0,"index":299},{"krate":0,"index":301}],"decl_id":null,"docs":" The CRC calculated by a [`CrcReader`].","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1300},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,99,114,99,46,114,115],"byte_start":11011,"byte_end":11020,"line_start":22,"line_end":22,"column_start":12,"column_end":21},"name":"CrcReader","qualname":"::crc::CrcReader","value":"CrcReader {  }","parent":null,"children":[{"krate":0,"index":305},{"krate":0,"index":307}],"decl_id":null,"docs":" A wrapper around a [`Read`] that calculates the CRC.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,99,114,99,46,114,115],"byte_start":11105,"byte_end":11108,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"new","qualname":"<Crc>::new","value":"fn () -> Crc","parent":null,"children":[],"decl_id":null,"docs":" Create a new CRC.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,99,114,99,46,114,115],"byte_start":11181,"byte_end":11184,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"sum","qualname":"<Crc>::sum","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" bla\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,99,114,99,46,114,115],"byte_start":11393,"byte_end":11399,"line_start":40,"line_end":40,"column_start":12,"column_end":18},"name":"amount","qualname":"<Crc>::amount","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The number of bytes that have been used to calculate the CRC.\n This value is only accurate if the amount is lower than 2<sup>32</sup>.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,99,114,99,46,114,115],"byte_start":11500,"byte_end":11506,"line_start":45,"line_end":45,"column_start":12,"column_end":18},"name":"update","qualname":"<Crc>::update","value":"fn (&mut self, data: &[u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Update the CRC with the bytes in `data`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,99,114,99,46,114,115],"byte_start":11733,"byte_end":11738,"line_start":51,"line_end":51,"column_start":12,"column_end":17},"name":"reset","qualname":"<Crc>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset the CRC.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,99,114,99,46,114,115],"byte_start":11886,"byte_end":11893,"line_start":57,"line_end":57,"column_start":12,"column_end":19},"name":"combine","qualname":"<Crc>::combine","value":"fn (&mut self, additional_crc: &Crc) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Combine the CRC with the CRC for the subsequent block of bytes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,99,114,99,46,114,115],"byte_start":12291,"byte_end":12294,"line_start":71,"line_end":71,"column_start":12,"column_end":15},"name":"new","qualname":"<CrcReader<R>>::new","value":"fn (r: R) -> CrcReader<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new CrcReader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,99,114,99,46,114,115],"byte_start":12483,"byte_end":12486,"line_start":81,"line_end":81,"column_start":12,"column_end":15},"name":"crc","qualname":"<CrcReader<R>>::crc","value":"fn (&self) -> &Crc","parent":null,"children":[],"decl_id":null,"docs":" Get the Crc for this CrcReader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,99,114,99,46,114,115],"byte_start":12598,"byte_end":12608,"line_start":86,"line_end":86,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<CrcReader<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Get the reader that is wrapped by this CrcReader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,99,114,99,46,114,115],"byte_start":12730,"byte_end":12737,"line_start":91,"line_end":91,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<CrcReader<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Get the reader that is wrapped by this CrcReader by reference.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,99,114,99,46,114,115],"byte_start":12872,"byte_end":12879,"line_start":96,"line_end":96,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<CrcReader<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the reader that is wrapped by this CrcReader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,99,114,99,46,114,115],"byte_start":12986,"byte_end":12991,"line_start":101,"line_end":101,"column_start":12,"column_end":17},"name":"reset","qualname":"<CrcReader<R>>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset the Crc in this CrcReader.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1306},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,99,114,99,46,114,115],"byte_start":13717,"byte_end":13726,"line_start":130,"line_end":130,"column_start":12,"column_end":21},"name":"CrcWriter","qualname":"::crc::CrcWriter","value":"CrcWriter {  }","parent":null,"children":[{"krate":0,"index":313},{"krate":0,"index":315}],"decl_id":null,"docs":" A wrapper around a [`Write`] that calculates the CRC.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,99,114,99,46,114,115],"byte_start":13837,"byte_end":13840,"line_start":137,"line_end":137,"column_start":12,"column_end":15},"name":"crc","qualname":"<CrcWriter<W>>::crc","value":"fn (&self) -> &Crc","parent":null,"children":[],"decl_id":null,"docs":" Get the Crc for this CrcWriter.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,99,114,99,46,114,115],"byte_start":13952,"byte_end":13962,"line_start":142,"line_end":142,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<CrcWriter<W>>::into_inner","value":"fn (self) -> W","parent":null,"children":[],"decl_id":null,"docs":" Get the writer that is wrapped by this CrcWriter.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,99,114,99,46,114,115],"byte_start":14084,"byte_end":14091,"line_start":147,"line_end":147,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<CrcWriter<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Get the writer that is wrapped by this CrcWriter by reference.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,99,114,99,46,114,115],"byte_start":14226,"byte_end":14233,"line_start":152,"line_end":152,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<CrcWriter<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the writer that is wrapped by this CrcWriter.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,99,114,99,46,114,115],"byte_start":14340,"byte_end":14345,"line_start":157,"line_end":157,"column_start":12,"column_end":17},"name":"reset","qualname":"<CrcWriter<W>>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset the Crc in this CrcWriter.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,99,114,99,46,114,115],"byte_start":14467,"byte_end":14470,"line_start":164,"line_end":164,"column_start":12,"column_end":15},"name":"new","qualname":"<CrcWriter<W>>::new","value":"fn (w: W) -> CrcWriter<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new CrcWriter.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1312},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":22213,"byte_end":22227,"line_start":45,"line_end":45,"column_start":12,"column_end":26},"name":"DeflateEncoder","qualname":"::deflate::bufread::DeflateEncoder","value":"DeflateEncoder {  }","parent":null,"children":[{"krate":0,"index":321},{"krate":0,"index":323}],"decl_id":null,"docs":" A DEFLATE encoder, or compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":22442,"byte_end":22445,"line_start":53,"line_end":53,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateEncoder<R>>::new","value":"fn (r: R, level: ::Compression) -> DeflateEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will read uncompressed data from the given\n stream and emit the compressed stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":23106,"byte_end":23111,"line_start":73,"line_end":73,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateEncoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":23281,"byte_end":23288,"line_start":79,"line_end":79,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateEncoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":23533,"byte_end":23540,"line_start":87,"line_end":87,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateEncoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":23668,"byte_end":23678,"line_start":92,"line_end":92,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateEncoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":23949,"byte_end":23957,"line_start":100,"line_end":100,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateEncoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been read into this compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":24191,"byte_end":24200,"line_start":108,"line_end":108,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateEncoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1318},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":26025,"byte_end":26039,"line_start":171,"line_end":171,"column_start":12,"column_end":26},"name":"DeflateDecoder","qualname":"::deflate::bufread::DeflateDecoder","value":"DeflateDecoder {  }","parent":null,"children":[{"krate":0,"index":329},{"krate":0,"index":331}],"decl_id":null,"docs":" A DEFLATE decoder, or decompressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":26327,"byte_end":26330,"line_start":183,"line_end":183,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateDecoder<R>>::new","value":"fn (r: R) -> DeflateDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":26870,"byte_end":26875,"line_start":199,"line_end":199,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateDecoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":27162,"byte_end":27172,"line_start":208,"line_end":208,"column_start":12,"column_end":22},"name":"reset_data","qualname":"<DeflateDecoder<R>>::reset_data","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder's data","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":27292,"byte_end":27299,"line_start":213,"line_end":213,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":27544,"byte_end":27551,"line_start":221,"line_end":221,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":27679,"byte_end":27689,"line_start":226,"line_end":226,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":27958,"byte_end":27966,"line_start":234,"line_end":234,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateDecoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":28102,"byte_end":28111,"line_start":239,"line_end":239,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateDecoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has produced.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1324},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":29980,"byte_end":29994,"line_start":41,"line_end":41,"column_start":12,"column_end":26},"name":"DeflateEncoder","qualname":"::deflate::read::DeflateEncoder","value":"DeflateEncoder {  }","parent":null,"children":[{"krate":0,"index":337}],"decl_id":null,"docs":" A DEFLATE encoder, or compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":30224,"byte_end":30227,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateEncoder<R>>::new","value":"fn (r: R, level: ::Compression) -> DeflateEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will read uncompressed data from the given\n stream and emit the compressed stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":30959,"byte_end":30964,"line_start":66,"line_end":66,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateEncoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":31160,"byte_end":31167,"line_start":72,"line_end":72,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateEncoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":31433,"byte_end":31440,"line_start":80,"line_end":80,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateEncoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":31781,"byte_end":31791,"line_start":89,"line_end":89,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateEncoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, returning the underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":32090,"byte_end":32098,"line_start":97,"line_end":97,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateEncoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been read into this compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":32333,"byte_end":32342,"line_start":105,"line_end":105,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateEncoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1330},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":34117,"byte_end":34131,"line_start":168,"line_end":168,"column_start":12,"column_end":26},"name":"DeflateDecoder","qualname":"::deflate::read::DeflateDecoder","value":"DeflateDecoder {  }","parent":null,"children":[{"krate":0,"index":343}],"decl_id":null,"docs":" A DEFLATE decoder, or decompressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":34328,"byte_end":34331,"line_start":175,"line_end":175,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateDecoder<R>>::new","value":"fn (r: R) -> DeflateDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":34649,"byte_end":34661,"line_start":183,"line_end":183,"column_start":12,"column_end":24},"name":"new_with_buf","qualname":"<DeflateDecoder<R>>::new_with_buf","value":"fn (r: R, buf: Vec<u8>) -> DeflateDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Same as `new`, but the intermediate buffer for data is specified.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":35381,"byte_end":35386,"line_start":201,"line_end":201,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateDecoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":35582,"byte_end":35589,"line_start":207,"line_end":207,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":35855,"byte_end":35862,"line_start":215,"line_end":215,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":36203,"byte_end":36213,"line_start":224,"line_end":224,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":36510,"byte_end":36518,"line_start":232,"line_end":232,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateDecoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":36655,"byte_end":36664,"line_start":237,"line_end":237,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateDecoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has produced.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1336},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":38253,"byte_end":38267,"line_start":35,"line_end":35,"column_start":12,"column_end":26},"name":"DeflateEncoder","qualname":"::deflate::write::DeflateEncoder","value":"DeflateEncoder {  }","parent":null,"children":[{"krate":0,"index":349}],"decl_id":null,"docs":" A DEFLATE encoder, or compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":38597,"byte_end":38600,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateEncoder<W>>::new","value":"fn (w: W, level: ::Compression) -> DeflateEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will write compressed data to the stream\n given at the given compression level.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":38829,"byte_end":38836,"line_start":52,"line_end":52,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateEncoder<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":39113,"byte_end":39120,"line_start":60,"line_end":60,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateEncoder<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":39998,"byte_end":40003,"line_start":80,"line_end":80,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateEncoder<W>>::reset","value":"fn (&mut self, w: W) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the output\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":40763,"byte_end":40773,"line_start":101,"line_end":101,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<DeflateEncoder<W>>::try_finish","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":41608,"byte_end":41614,"line_start":120,"line_end":120,"column_start":12,"column_end":18},"name":"finish","qualname":"<DeflateEncoder<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":42299,"byte_end":42311,"line_start":137,"line_end":137,"column_start":12,"column_end":24},"name":"flush_finish","qualname":"<DeflateEncoder<W>>::flush_finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":42637,"byte_end":42645,"line_start":146,"line_end":146,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateEncoder<W>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been written to this compresor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":42888,"byte_end":42897,"line_start":154,"line_end":154,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateEncoder<W>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1342},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":44837,"byte_end":44851,"line_start":220,"line_end":220,"column_start":12,"column_end":26},"name":"DeflateDecoder","qualname":"::deflate::write::DeflateDecoder","value":"DeflateDecoder {  }","parent":null,"children":[{"krate":0,"index":355}],"decl_id":null,"docs":" A DEFLATE decoder, or decompressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":45140,"byte_end":45143,"line_start":229,"line_end":229,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateDecoder<W>>::new","value":"fn (w: W) -> DeflateDecoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will write uncompressed data to the stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":45345,"byte_end":45352,"line_start":236,"line_end":236,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateDecoder<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":45629,"byte_end":45636,"line_start":244,"line_end":244,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateDecoder<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":46417,"byte_end":46422,"line_start":263,"line_end":263,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateDecoder<W>>::reset","value":"fn (&mut self, w: W) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the output\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":354},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":47163,"byte_end":47173,"line_start":284,"line_end":284,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<DeflateDecoder<W>>::try_finish","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":356},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":47987,"byte_end":47993,"line_start":303,"line_end":303,"column_start":12,"column_end":18},"name":"finish","qualname":"<DeflateDecoder<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":358},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":48355,"byte_end":48363,"line_start":313,"line_end":313,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateDecoder<W>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed for\n decompression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":360},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":48533,"byte_end":48542,"line_start":319,"line_end":319,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateDecoder<W>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has written to its\n output stream.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1348},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":72086,"byte_end":72095,"line_start":146,"line_end":146,"column_start":12,"column_end":21},"name":"GzEncoder","qualname":"::gz::bufread::GzEncoder","value":"GzEncoder {  }","parent":null,"children":[{"krate":0,"index":361},{"krate":0,"index":363},{"krate":0,"index":365},{"krate":0,"index":367}],"decl_id":null,"docs":" A gzip streaming encoder","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":494},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":72863,"byte_end":72866,"line_start":171,"line_end":171,"column_start":12,"column_end":15},"name":"new","qualname":"<GzEncoder<R>>::new","value":"fn (r: R, level: Compression) -> GzEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will use the given compression level.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":73621,"byte_end":73628,"line_start":196,"line_end":196,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzEncoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":73895,"byte_end":73902,"line_start":204,"line_end":204,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzEncoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":74045,"byte_end":74055,"line_start":209,"line_end":209,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<GzEncoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying stream, consuming this encoder\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1354},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":76075,"byte_end":76084,"line_start":282,"line_end":282,"column_start":12,"column_end":21},"name":"GzDecoder","qualname":"::gz::bufread::GzDecoder","value":"GzDecoder {  }","parent":null,"children":[{"krate":0,"index":373},{"krate":0,"index":375},{"krate":0,"index":377}],"decl_id":null,"docs":" A gzip streaming decoder","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":76355,"byte_end":76358,"line_start":291,"line_end":291,"column_start":12,"column_end":15},"name":"new","qualname":"<GzDecoder<R>>::new","value":"fn (mut r: R) -> GzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder from the given reader, immediately parsing the\n gzip header.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":77711,"byte_end":77717,"line_start":339,"line_end":339,"column_start":12,"column_end":18},"name":"header","qualname":"<GzDecoder<R>>::header","value":"fn (&self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the header associated with this stream, if it was valid\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":77880,"byte_end":77887,"line_start":344,"line_end":344,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":78154,"byte_end":78161,"line_start":352,"line_end":352,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":78306,"byte_end":78316,"line_start":357,"line_end":357,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<GzDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1360},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":80778,"byte_end":80792,"line_start":436,"line_end":436,"column_start":12,"column_end":26},"name":"MultiGzDecoder","qualname":"::gz::bufread::MultiGzDecoder","value":"MultiGzDecoder {  }","parent":null,"children":[{"krate":0,"index":383},{"krate":0,"index":385},{"krate":0,"index":387}],"decl_id":null,"docs":" A gzip streaming decoder that decodes all members of a multistream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":81142,"byte_end":81145,"line_start":446,"line_end":446,"column_start":12,"column_end":15},"name":"new","qualname":"<MultiGzDecoder<R>>::new","value":"fn (mut r: R) -> MultiGzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder from the given reader, immediately parsing the\n (first) gzip header. If the gzip stream contains multiple members all will\n be decoded.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":550},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":83001,"byte_end":83007,"line_start":508,"line_end":508,"column_start":12,"column_end":18},"name":"header","qualname":"<MultiGzDecoder<R>>::header","value":"fn (&self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the current header associated with this stream, if it's valid\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":83145,"byte_end":83152,"line_start":513,"line_end":513,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<MultiGzDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":554},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":83419,"byte_end":83426,"line_start":521,"line_end":521,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<MultiGzDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":556},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":83571,"byte_end":83581,"line_start":526,"line_end":526,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<MultiGzDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1366},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":85386,"byte_end":85395,"line_start":36,"line_end":36,"column_start":12,"column_end":21},"name":"GzEncoder","qualname":"::gz::read::GzEncoder","value":"GzEncoder {  }","parent":null,"children":[{"krate":0,"index":393}],"decl_id":null,"docs":" A gzip streaming encoder","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":85943,"byte_end":85946,"line_start":52,"line_end":52,"column_start":12,"column_end":15},"name":"new","qualname":"<GzEncoder<R>>::new","value":"fn (r: R, level: Compression) -> GzEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will use the given compression level.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":86129,"byte_end":86136,"line_start":59,"line_end":59,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzEncoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":86403,"byte_end":86410,"line_start":67,"line_end":67,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzEncoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":86553,"byte_end":86563,"line_start":72,"line_end":72,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<GzEncoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying stream, consuming this encoder\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1372},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":88028,"byte_end":88037,"line_start":128,"line_end":128,"column_start":12,"column_end":21},"name":"GzDecoder","qualname":"::gz::read::GzDecoder","value":"GzDecoder {  }","parent":null,"children":[{"krate":0,"index":399}],"decl_id":null,"docs":" A gzip streaming decoder","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":88229,"byte_end":88232,"line_start":135,"line_end":135,"column_start":12,"column_end":15},"name":"new","qualname":"<GzDecoder<R>>::new","value":"fn (r: R) -> GzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder from the given reader, immediately parsing the\n gzip header.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":88466,"byte_end":88472,"line_start":144,"line_end":144,"column_start":12,"column_end":18},"name":"header","qualname":"<GzDecoder<R>>::header","value":"fn (&self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the header associated with this stream, if it was valid.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":88604,"byte_end":88611,"line_start":149,"line_end":149,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":88878,"byte_end":88885,"line_start":157,"line_end":157,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":89030,"byte_end":89040,"line_start":162,"line_end":162,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<GzDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1378},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":91007,"byte_end":91021,"line_start":224,"line_end":224,"column_start":12,"column_end":26},"name":"MultiGzDecoder","qualname":"::gz::read::MultiGzDecoder","value":"MultiGzDecoder {  }","parent":null,"children":[{"krate":0,"index":405}],"decl_id":null,"docs":" A gzip streaming decoder that decodes all members of a multistream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":636},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":91305,"byte_end":91308,"line_start":232,"line_end":232,"column_start":12,"column_end":15},"name":"new","qualname":"<MultiGzDecoder<R>>::new","value":"fn (r: R) -> MultiGzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder from the given reader, immediately parsing the\n (first) gzip header. If the gzip stream contains multiple members all will\n be decoded.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":640},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":91568,"byte_end":91574,"line_start":241,"line_end":241,"column_start":12,"column_end":18},"name":"header","qualname":"<MultiGzDecoder<R>>::header","value":"fn (&self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the current header associated with this stream, if it's valid.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":642},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":91706,"byte_end":91713,"line_start":246,"line_end":246,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<MultiGzDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":644},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":91980,"byte_end":91987,"line_start":254,"line_end":254,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<MultiGzDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":646},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":92132,"byte_end":92142,"line_start":259,"line_end":259,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<MultiGzDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1384},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":93563,"byte_end":93572,"line_start":39,"line_end":39,"column_start":12,"column_end":21},"name":"GzEncoder","qualname":"::gz::write::GzEncoder","value":"GzEncoder {  }","parent":null,"children":[{"krate":0,"index":411},{"krate":0,"index":413},{"krate":0,"index":415},{"krate":0,"index":417}],"decl_id":null,"docs":" A gzip streaming encoder","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":700},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":94319,"byte_end":94322,"line_start":63,"line_end":63,"column_start":12,"column_end":15},"name":"new","qualname":"<GzEncoder<W>>::new","value":"fn (w: W, level: Compression) -> GzEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will use the given compression level.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":94481,"byte_end":94488,"line_start":68,"line_end":68,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzEncoder<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":94745,"byte_end":94752,"line_start":76,"line_end":76,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzEncoder<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":95431,"byte_end":95441,"line_start":95,"line_end":95,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<GzEncoder<W>>::try_finish","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":96814,"byte_end":96820,"line_start":131,"line_end":131,"column_start":12,"column_end":18},"name":"finish","qualname":"<GzEncoder<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Finish encoding this stream, returning the underlying writer once the\n encoding is done.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1390},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":99292,"byte_end":99301,"line_start":219,"line_end":219,"column_start":12,"column_end":21},"name":"GzDecoder","qualname":"::gz::write::GzDecoder","value":"GzDecoder {  }","parent":null,"children":[{"krate":0,"index":423},{"krate":0,"index":425},{"krate":0,"index":427},{"krate":0,"index":429}],"decl_id":null,"docs":" A gzip streaming decoder","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":730},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":99708,"byte_end":99711,"line_start":233,"line_end":233,"column_start":12,"column_end":15},"name":"new","qualname":"<GzDecoder<W>>::new","value":"fn (w: W) -> GzDecoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will write uncompressed data to the stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":732},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":100040,"byte_end":100046,"line_start":243,"line_end":243,"column_start":12,"column_end":18},"name":"header","qualname":"<GzDecoder<W>>::header","value":"fn (&self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the header associated with this stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":734},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":100179,"byte_end":100186,"line_start":248,"line_end":248,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzDecoder<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":736},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":100473,"byte_end":100480,"line_start":256,"line_end":256,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzDecoder<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":738},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":101133,"byte_end":101143,"line_start":275,"line_end":275,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<GzDecoder<W>>::try_finish","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":740},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":101982,"byte_end":101988,"line_start":295,"line_end":295,"column_start":12,"column_end":18},"name":"finish","qualname":"<GzDecoder<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, flushing the output stream.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1396},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":57390,"byte_end":57398,"line_start":22,"line_end":22,"column_start":12,"column_end":20},"name":"GzHeader","qualname":"::gz::GzHeader","value":"GzHeader {  }","parent":null,"children":[{"krate":0,"index":433},{"krate":0,"index":435},{"krate":0,"index":437},{"krate":0,"index":439},{"krate":0,"index":441}],"decl_id":null,"docs":" A structure representing the header of a gzip stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":762},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":57641,"byte_end":57649,"line_start":32,"line_end":32,"column_start":12,"column_end":20},"name":"filename","qualname":"<GzHeader>::filename","value":"fn (&self) -> Option<&[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `filename` field of this gzip stream's header, if present.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":764},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":57817,"byte_end":57822,"line_start":37,"line_end":37,"column_start":12,"column_end":17},"name":"extra","qualname":"<GzHeader>::extra","value":"fn (&self) -> Option<&[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `extra` field of this gzip stream's header, if present.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":766},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":57989,"byte_end":57996,"line_start":42,"line_end":42,"column_start":12,"column_end":19},"name":"comment","qualname":"<GzHeader>::comment","value":"fn (&self) -> Option<&[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `comment` field of this gzip stream's header, if present.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":768},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":58282,"byte_end":58298,"line_start":50,"line_end":50,"column_start":12,"column_end":28},"name":"operating_system","qualname":"<GzHeader>::operating_system","value":"fn (&self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the `operating_system` field of this gzip stream's header.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":770},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":58920,"byte_end":58925,"line_start":63,"line_end":63,"column_start":12,"column_end":17},"name":"mtime","qualname":"<GzHeader>::mtime","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" This gives the most recent modification time of the original file being compressed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":772},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":59320,"byte_end":59337,"line_start":74,"line_end":74,"column_start":12,"column_end":29},"name":"mtime_as_datetime","qualname":"<GzHeader>::mtime_as_datetime","value":"fn (&self) -> Option<time::SystemTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns the most recent modification time represented by a date-time type.\n Returns `None` if the value of the underlying counter is 0,\n indicating no time stamp is available.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1412},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":60410,"byte_end":60419,"line_start":112,"line_end":112,"column_start":12,"column_end":21},"name":"GzBuilder","qualname":"::gz::GzBuilder","value":"GzBuilder {  }","parent":null,"children":[{"krate":0,"index":443},{"krate":0,"index":445},{"krate":0,"index":447},{"krate":0,"index":449},{"krate":0,"index":451}],"decl_id":null,"docs":" A builder structure to create a new gzip Encoder.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":776},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":60654,"byte_end":60657,"line_start":122,"line_end":122,"column_start":12,"column_end":15},"name":"new","qualname":"<GzBuilder>::new","value":"fn () -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Create a new blank builder with no header by default.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":778},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":60917,"byte_end":60922,"line_start":133,"line_end":133,"column_start":12,"column_end":17},"name":"mtime","qualname":"<GzBuilder>::mtime","value":"fn (mut self, mtime: u32) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `mtime` field in the gzip header.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":780},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":61086,"byte_end":61102,"line_start":139,"line_end":139,"column_start":12,"column_end":28},"name":"operating_system","qualname":"<GzBuilder>::operating_system","value":"fn (mut self, os: u8) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `operating_system` field in the gzip header.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":782},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":61265,"byte_end":61270,"line_start":145,"line_end":145,"column_start":12,"column_end":17},"name":"extra","qualname":"<GzBuilder>::extra","value":"fn <T> (mut self, extra: T) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `extra` field in the gzip header.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":784},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":61544,"byte_end":61552,"line_start":155,"line_end":155,"column_start":12,"column_end":20},"name":"filename","qualname":"<GzBuilder>::filename","value":"fn <T> (mut self, filename: T) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `filename` field in the gzip header.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":786},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":61856,"byte_end":61863,"line_start":165,"line_end":165,"column_start":12,"column_end":19},"name":"comment","qualname":"<GzBuilder>::comment","value":"fn <T> (mut self, comment: T) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `comment` field in the gzip header.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":788},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":62226,"byte_end":62231,"line_start":174,"line_end":174,"column_start":12,"column_end":17},"name":"write","qualname":"<GzBuilder>::write","value":"fn <W> (self, w: W, lvl: Compression) -> write::GzEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Consume this builder, creating a writer encoder in the process.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":790},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":62575,"byte_end":62579,"line_start":182,"line_end":182,"column_start":12,"column_end":16},"name":"read","qualname":"<GzBuilder>::read","value":"fn <R> (self, r: R, lvl: Compression) -> read::GzEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Consume this builder, creating a reader encoder in the process.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":792},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":62928,"byte_end":62936,"line_start":190,"line_end":190,"column_start":12,"column_end":20},"name":"buf_read","qualname":"<GzBuilder>::buf_read","value":"fn <R> (self, r: R, lvl: Compression) -> bufread::GzEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Consume this builder, creating a reader encoder in the process.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":820},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,105,111,46,114,115],"byte_start":108582,"byte_end":108587,"line_start":15,"line_end":15,"column_start":10,"column_end":15},"name":"Flush","qualname":"::zio::Ops::Flush","value":"type Flush: Flush;","parent":{"krate":0,"index":818},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1424},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":117072,"byte_end":117080,"line_start":25,"line_end":25,"column_start":12,"column_end":20},"name":"Compress","qualname":"::mem::Compress","value":"Compress {  }","parent":null,"children":[{"krate":0,"index":467}],"decl_id":null,"docs":" Raw in-memory compression stream for blocks of data.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1430},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":117725,"byte_end":117735,"line_start":42,"line_end":42,"column_start":12,"column_end":22},"name":"Decompress","qualname":"::mem::Decompress","value":"Decompress {  }","parent":null,"children":[{"krate":0,"index":469}],"decl_id":null,"docs":" Raw in-memory decompression stream for blocks of data.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":483},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":118600,"byte_end":118604,"line_start":73,"line_end":73,"column_start":5,"column_end":9},"name":"None","qualname":"::mem::FlushCompress::None","value":"FlushCompress::None","parent":{"krate":0,"index":1454},"children":[],"decl_id":null,"docs":" A typical parameter for passing to compression/decompression functions,\n this indicates that the underlying stream to decide how much data to\n accumulate before producing output in order to maximize compression.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":487},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":119055,"byte_end":119059,"line_start":82,"line_end":82,"column_start":5,"column_end":9},"name":"Sync","qualname":"::mem::FlushCompress::Sync","value":"FlushCompress::Sync","parent":{"krate":0,"index":1454},"children":[],"decl_id":null,"docs":" All pending output is flushed to the output buffer and the output is\n aligned on a byte boundary so that the decompressor can get all input\n data available so far.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":491},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":119592,"byte_end":119599,"line_start":92,"line_end":92,"column_start":5,"column_end":12},"name":"Partial","qualname":"::mem::FlushCompress::Partial","value":"FlushCompress::Partial","parent":{"krate":0,"index":1454},"children":[],"decl_id":null,"docs":" All pending output is flushed to the output buffer, but the output is\n not aligned to a byte boundary.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":495},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":119943,"byte_end":119947,"line_start":99,"line_end":99,"column_start":5,"column_end":9},"name":"Full","qualname":"::mem::FlushCompress::Full","value":"FlushCompress::Full","parent":{"krate":0,"index":1454},"children":[],"decl_id":null,"docs":" All output is flushed as with `Flush::Sync` and the compression state is\n reset so decompression can restart from this point if previous\n compressed data has been damaged or if random access is desired.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":499},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":120175,"byte_end":120181,"line_start":105,"line_end":105,"column_start":5,"column_end":11},"name":"Finish","qualname":"::mem::FlushCompress::Finish","value":"FlushCompress::Finish","parent":{"krate":0,"index":1454},"children":[],"decl_id":null,"docs":" Pending input is processed and pending output is flushed.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":503},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":120233,"byte_end":120247,"line_start":108,"line_end":108,"column_start":5,"column_end":19},"name":"_Nonexhaustive","qualname":"::mem::FlushCompress::_Nonexhaustive","value":"FlushCompress::_Nonexhaustive","parent":{"krate":0,"index":1454},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1454},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":118346,"byte_end":118359,"line_start":69,"line_end":69,"column_start":10,"column_end":23},"name":"FlushCompress","qualname":"::mem::FlushCompress","value":"FlushCompress::{None, Sync, Partial, Full, Finish, _Nonexhaustive}","parent":null,"children":[{"krate":0,"index":483},{"krate":0,"index":487},{"krate":0,"index":491},{"krate":0,"index":495},{"krate":0,"index":499},{"krate":0,"index":503}],"decl_id":null,"docs":" Values which indicate the form of flushing to be used when compressing\n in-memory data.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":118337,"byte_end":120250,"line_start":69,"line_end":109,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":118337,"byte_end":120250,"line_start":69,"line_end":109,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":505},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":120659,"byte_end":120663,"line_start":118,"line_end":118,"column_start":5,"column_end":9},"name":"None","qualname":"::mem::FlushDecompress::None","value":"FlushDecompress::None","parent":{"krate":0,"index":1474},"children":[],"decl_id":null,"docs":" A typical parameter for passing to compression/decompression functions,\n this indicates that the underlying stream to decide how much data to\n accumulate before producing output in order to maximize compression.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":509},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":121114,"byte_end":121118,"line_start":127,"line_end":127,"column_start":5,"column_end":9},"name":"Sync","qualname":"::mem::FlushDecompress::Sync","value":"FlushDecompress::Sync","parent":{"krate":0,"index":1474},"children":[],"decl_id":null,"docs":" All pending output is flushed to the output buffer and the output is\n aligned on a byte boundary so that the decompressor can get all input\n data available so far.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":513},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":121346,"byte_end":121352,"line_start":133,"line_end":133,"column_start":5,"column_end":11},"name":"Finish","qualname":"::mem::FlushDecompress::Finish","value":"FlushDecompress::Finish","parent":{"krate":0,"index":1474},"children":[],"decl_id":null,"docs":" Pending input is processed and pending output is flushed.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":517},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":121404,"byte_end":121418,"line_start":136,"line_end":136,"column_start":5,"column_end":19},"name":"_Nonexhaustive","qualname":"::mem::FlushDecompress::_Nonexhaustive","value":"FlushDecompress::_Nonexhaustive","parent":{"krate":0,"index":1474},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1474},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":120403,"byte_end":120418,"line_start":114,"line_end":114,"column_start":10,"column_end":25},"name":"FlushDecompress","qualname":"::mem::FlushDecompress","value":"FlushDecompress::{None, Sync, Finish, _Nonexhaustive}","parent":null,"children":[{"krate":0,"index":505},{"krate":0,"index":509},{"krate":0,"index":513},{"krate":0,"index":517}],"decl_id":null,"docs":" Values which indicate the form of flushing to be used when\n decompressing in-memory data.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":120394,"byte_end":121421,"line_start":114,"line_end":137,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":120394,"byte_end":121421,"line_start":114,"line_end":137,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":1504},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":121724,"byte_end":121739,"line_start":148,"line_end":148,"column_start":12,"column_end":27},"name":"DecompressError","qualname":"::mem::DecompressError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error returned when a decompression object finds that the input stream of\n bytes was not a valid input stream of bytes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":942},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":121975,"byte_end":121991,"line_start":155,"line_end":155,"column_start":12,"column_end":28},"name":"needs_dictionary","qualname":"<DecompressError>::needs_dictionary","value":"fn (&self) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Indicates whether decompression failed due to requiring a dictionary.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1510},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":122187,"byte_end":122200,"line_start":163,"line_end":163,"column_start":12,"column_end":25},"name":"CompressError","qualname":"::mem::CompressError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error returned when a compression object is used incorrectly or otherwise\n generates an error.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":529},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":122557,"byte_end":122559,"line_start":173,"line_end":173,"column_start":5,"column_end":7},"name":"Ok","qualname":"::mem::Status::Ok","value":"Status::Ok","parent":{"krate":0,"index":1516},"children":[],"decl_id":null,"docs":" Indicates success.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":531},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":123038,"byte_end":123046,"line_start":184,"line_end":184,"column_start":5,"column_end":13},"name":"BufError","qualname":"::mem::Status::BufError","value":"Status::BufError","parent":{"krate":0,"index":1516},"children":[],"decl_id":null,"docs":" Indicates that forward progress is not possible due to input or output\n buffers being empty.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":533},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":123328,"byte_end":123337,"line_start":191,"line_end":191,"column_start":5,"column_end":14},"name":"StreamEnd","qualname":"::mem::Status::StreamEnd","value":"Status::StreamEnd","parent":{"krate":0,"index":1516},"children":[],"decl_id":null,"docs":" Indicates that all input has been consumed and all output bytes have\n been written. Decompression/compression should not be called again.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1516},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":122365,"byte_end":122371,"line_start":168,"line_end":168,"column_start":10,"column_end":16},"name":"Status","qualname":"::mem::Status","value":"Status::{Ok, BufError, StreamEnd}","parent":null,"children":[{"krate":0,"index":529},{"krate":0,"index":531},{"krate":0,"index":533}],"decl_id":null,"docs":" Possible status results of compressing some data or successfully\n decompressing a block of data.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":122356,"byte_end":123340,"line_start":168,"line_end":192,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":122356,"byte_end":123340,"line_start":168,"line_end":192,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":946},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":123661,"byte_end":123664,"line_start":200,"line_end":200,"column_start":12,"column_end":15},"name":"new","qualname":"<Compress>::new","value":"fn (level: Compression, zlib_header: bool) -> Compress","parent":null,"children":[],"decl_id":null,"docs":" Creates a new object ready for compressing data that it's given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":948},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":124609,"byte_end":124617,"line_start":229,"line_end":229,"column_start":12,"column_end":20},"name":"total_in","qualname":"<Compress>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of input bytes which have been processed by\n this compression object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":950},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":124790,"byte_end":124799,"line_start":235,"line_end":235,"column_start":12,"column_end":21},"name":"total_out","qualname":"<Compress>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of output bytes which have been produced by\n this compression object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":952},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":125656,"byte_end":125661,"line_start":259,"line_end":259,"column_start":12,"column_end":17},"name":"reset","qualname":"<Compress>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Quickly resets this compressor without having to reallocate anything.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":954},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":127270,"byte_end":127278,"line_start":297,"line_end":297,"column_start":12,"column_end":20},"name":"compress","qualname":"<Compress>::compress","value":"fn (&mut self, input: &[u8], output: &mut [u8], flush: FlushCompress) -> Result<Status, CompressError>","parent":null,"children":[],"decl_id":null,"docs":" Compresses the input data into the output, consuming only as much\n input as needed and writing as much output as possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":956},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":128864,"byte_end":128876,"line_start":333,"line_end":333,"column_start":12,"column_end":24},"name":"compress_vec","qualname":"<Compress>::compress_vec","value":"fn (&mut self, input: &[u8], output: &mut Vec<u8>, flush: FlushCompress) -> Result<Status, CompressError>","parent":null,"children":[],"decl_id":null,"docs":" Compresses the input data into the extra space of the output, consuming\n only as much input as needed and writing as much output as possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":960},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":129720,"byte_end":129723,"line_start":360,"line_end":360,"column_start":12,"column_end":15},"name":"new","qualname":"<Decompress>::new","value":"fn (zlib_header: bool) -> Decompress","parent":null,"children":[],"decl_id":null,"docs":" Creates a new object ready for decompressing data that it's given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":962},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":130525,"byte_end":130533,"line_start":385,"line_end":385,"column_start":12,"column_end":20},"name":"total_in","qualname":"<Decompress>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of input bytes which have been processed by\n this decompression object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":964},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":130708,"byte_end":130717,"line_start":391,"line_end":391,"column_start":12,"column_end":21},"name":"total_out","qualname":"<Decompress>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of output bytes which have been produced by\n this decompression object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":966},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":131914,"byte_end":131924,"line_start":417,"line_end":417,"column_start":12,"column_end":22},"name":"decompress","qualname":"<Decompress>::decompress","value":"fn (&mut self, input: &[u8], output: &mut [u8], flush: FlushDecompress) -> Result<Status, DecompressError>","parent":null,"children":[],"decl_id":null,"docs":" Decompresses the input data into the output, consuming only as much\n input as needed and writing as much output as possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":968},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":133922,"byte_end":133936,"line_start":462,"line_end":462,"column_start":12,"column_end":26},"name":"decompress_vec","qualname":"<Decompress>::decompress_vec","value":"fn (&mut self, input: &[u8], output: &mut Vec<u8>, flush: FlushDecompress) -> Result<Status, DecompressError>","parent":null,"children":[],"decl_id":null,"docs":" Decompresses the input data into the extra space in the output vector\n specified by `output`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":970},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":135677,"byte_end":135682,"line_start":509,"line_end":509,"column_start":12,"column_end":17},"name":"reset","qualname":"<Decompress>::reset","value":"fn (&mut self, zlib_header: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Performs the equivalent of replacing this decompression state with a\n freshly allocated copy.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1536},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":149010,"byte_end":149021,"line_start":41,"line_end":41,"column_start":12,"column_end":23},"name":"ZlibEncoder","qualname":"::zlib::bufread::ZlibEncoder","value":"ZlibEncoder {  }","parent":null,"children":[{"krate":0,"index":537},{"krate":0,"index":539}],"decl_id":null,"docs":" A ZLIB encoder, or compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1030},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":149233,"byte_end":149236,"line_start":49,"line_end":49,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibEncoder<R>>::new","value":"fn (r: R, level: ::Compression) -> ZlibEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will read uncompressed data from the given\n stream and emit the compressed stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1036},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":149883,"byte_end":149888,"line_start":69,"line_end":69,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibEncoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1038},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":150058,"byte_end":150065,"line_start":75,"line_end":75,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibEncoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1040},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":150310,"byte_end":150317,"line_start":83,"line_end":83,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibEncoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1042},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":150445,"byte_end":150455,"line_start":88,"line_end":88,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ZlibEncoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1044},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":150726,"byte_end":150734,"line_start":96,"line_end":96,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibEncoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been read into this compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1046},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":150968,"byte_end":150977,"line_start":104,"line_end":104,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibEncoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1542},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":152769,"byte_end":152780,"line_start":169,"line_end":169,"column_start":12,"column_end":23},"name":"ZlibDecoder","qualname":"::zlib::bufread::ZlibDecoder","value":"ZlibDecoder {  }","parent":null,"children":[{"krate":0,"index":545},{"krate":0,"index":547}],"decl_id":null,"docs":" A ZLIB decoder, or decompressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1060},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":152961,"byte_end":152964,"line_start":177,"line_end":177,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibDecoder<R>>::new","value":"fn (r: R) -> ZlibDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1066},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":153594,"byte_end":153599,"line_start":197,"line_end":197,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibDecoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1068},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":153769,"byte_end":153776,"line_start":203,"line_end":203,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1070},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":154021,"byte_end":154028,"line_start":211,"line_end":211,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1072},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":154156,"byte_end":154166,"line_start":216,"line_end":216,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ZlibDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1074},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":154435,"byte_end":154443,"line_start":224,"line_end":224,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibDecoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1076},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":154579,"byte_end":154588,"line_start":229,"line_end":229,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibDecoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has produced.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1548},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":156328,"byte_end":156339,"line_start":38,"line_end":38,"column_start":12,"column_end":23},"name":"ZlibEncoder","qualname":"::zlib::read::ZlibEncoder","value":"ZlibEncoder {  }","parent":null,"children":[{"krate":0,"index":553}],"decl_id":null,"docs":" A ZLIB encoder, or compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1100},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":156563,"byte_end":156566,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibEncoder<R>>::new","value":"fn (r: R, level: ::Compression) -> ZlibEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will read uncompressed data from the given\n stream and emit the compressed stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1104},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":157286,"byte_end":157291,"line_start":63,"line_end":63,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibEncoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1106},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":157487,"byte_end":157494,"line_start":69,"line_end":69,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibEncoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1108},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":157760,"byte_end":157767,"line_start":77,"line_end":77,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibEncoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1110},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":158108,"byte_end":158118,"line_start":86,"line_end":86,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ZlibEncoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, returning the underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1112},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":158417,"byte_end":158425,"line_start":94,"line_end":94,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibEncoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been read into this compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1114},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":158660,"byte_end":158669,"line_start":102,"line_end":102,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibEncoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1554},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":160402,"byte_end":160413,"line_start":167,"line_end":167,"column_start":12,"column_end":23},"name":"ZlibDecoder","qualname":"::zlib::read::ZlibDecoder","value":"ZlibDecoder {  }","parent":null,"children":[{"krate":0,"index":559}],"decl_id":null,"docs":" A ZLIB decoder, or decompressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1128},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":160604,"byte_end":160607,"line_start":174,"line_end":174,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibDecoder<R>>::new","value":"fn (r: R) -> ZlibDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1130},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":160934,"byte_end":160946,"line_start":182,"line_end":182,"column_start":12,"column_end":24},"name":"new_with_buf","qualname":"<ZlibDecoder<R>>::new_with_buf","value":"fn (r: R, buf: Vec<u8>) -> ZlibDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Same as `new`, but the intermediate buffer for data is specified.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1134},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":161654,"byte_end":161659,"line_start":200,"line_end":200,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibDecoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1136},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":161855,"byte_end":161862,"line_start":206,"line_end":206,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1138},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":162128,"byte_end":162135,"line_start":214,"line_end":214,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1140},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":162476,"byte_end":162486,"line_start":223,"line_end":223,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ZlibDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1142},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":162783,"byte_end":162791,"line_start":231,"line_end":231,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibDecoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1144},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":162928,"byte_end":162937,"line_start":236,"line_end":236,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibDecoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has produced.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1560},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":164535,"byte_end":164546,"line_start":36,"line_end":36,"column_start":12,"column_end":23},"name":"ZlibEncoder","qualname":"::zlib::write::ZlibEncoder","value":"ZlibEncoder {  }","parent":null,"children":[{"krate":0,"index":565}],"decl_id":null,"docs":" A ZLIB encoder, or compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1172},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":164873,"byte_end":164876,"line_start":46,"line_end":46,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibEncoder<W>>::new","value":"fn (w: W, level: ::Compression) -> ZlibEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will write compressed data to the stream\n given at the given compression level.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1174},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":165098,"byte_end":165105,"line_start":53,"line_end":53,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibEncoder<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1176},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":165382,"byte_end":165389,"line_start":61,"line_end":61,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibEncoder<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1178},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":166204,"byte_end":166209,"line_start":80,"line_end":80,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibEncoder<W>>::reset","value":"fn (&mut self, w: W) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the output\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1180},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":166969,"byte_end":166979,"line_start":101,"line_end":101,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<ZlibEncoder<W>>::try_finish","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1182},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":167814,"byte_end":167820,"line_start":120,"line_end":120,"column_start":12,"column_end":18},"name":"finish","qualname":"<ZlibEncoder<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1184},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":168505,"byte_end":168517,"line_start":137,"line_end":137,"column_start":12,"column_end":24},"name":"flush_finish","qualname":"<ZlibEncoder<W>>::flush_finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1186},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":168843,"byte_end":168851,"line_start":146,"line_end":146,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibEncoder<W>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been written to this compresor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1188},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":169094,"byte_end":169103,"line_start":154,"line_end":154,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibEncoder<W>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1566},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":170989,"byte_end":171000,"line_start":222,"line_end":222,"column_start":12,"column_end":23},"name":"ZlibDecoder","qualname":"::zlib::write::ZlibDecoder","value":"ZlibDecoder {  }","parent":null,"children":[{"krate":0,"index":571}],"decl_id":null,"docs":" A ZLIB decoder, or decompressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1202},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":171286,"byte_end":171289,"line_start":231,"line_end":231,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibDecoder<W>>::new","value":"fn (w: W) -> ZlibDecoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will write uncompressed data to the stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1204},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":171484,"byte_end":171491,"line_start":238,"line_end":238,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibDecoder<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1206},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":171768,"byte_end":171775,"line_start":246,"line_end":246,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibDecoder<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1208},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":172389,"byte_end":172394,"line_start":262,"line_end":262,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibDecoder<W>>::reset","value":"fn (&mut self, w: W) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the output\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1210},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":173170,"byte_end":173180,"line_start":283,"line_end":283,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<ZlibDecoder<W>>::try_finish","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1212},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":173994,"byte_end":174000,"line_start":302,"line_end":302,"column_start":12,"column_end":18},"name":"finish","qualname":"<ZlibDecoder<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1214},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":174362,"byte_end":174370,"line_start":312,"line_end":312,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibDecoder<W>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed for\n decompression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1216},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":174540,"byte_end":174549,"line_start":318,"line_end":318,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibDecoder<W>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has written to its\n output stream.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1228},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4504,"byte_end":4508,"line_start":129,"line_end":129,"column_start":9,"column_end":13},"name":"read","qualname":"::read","value":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":1230},{"krate":0,"index":1232},{"krate":0,"index":1234},{"krate":0,"index":1236},{"krate":0,"index":1238},{"krate":0,"index":1240},{"krate":0,"index":1242}],"decl_id":null,"docs":" Types which operate over [`Read`] streams, both encoders and decoders for\n various formats.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1244},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4955,"byte_end":4960,"line_start":143,"line_end":143,"column_start":9,"column_end":14},"name":"write","qualname":"::write","value":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":1246},{"krate":0,"index":1248},{"krate":0,"index":1250},{"krate":0,"index":1252},{"krate":0,"index":1254},{"krate":0,"index":1256}],"decl_id":null,"docs":" Types which operate over [`Write`] streams, both encoders and decoders for\n various formats.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1258},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5381,"byte_end":5388,"line_start":156,"line_end":156,"column_start":9,"column_end":16},"name":"bufread","qualname":"::bufread","value":"/home/eric/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":1260},{"krate":0,"index":1262},{"krate":0,"index":1264},{"krate":0,"index":1266},{"krate":0,"index":1268},{"krate":0,"index":1270},{"krate":0,"index":1272}],"decl_id":null,"docs":" Types which operate over [`BufRead`] streams, both encoders and decoders for\n various formats.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1572},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6619,"byte_end":6630,"line_start":187,"line_end":187,"column_start":12,"column_end":23},"name":"Compression","qualname":"::Compression","value":"","parent":null,"children":[],"decl_id":null,"docs":" When compressing data, the compression level can be specified by a value in\n this enum.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6608,"byte_end":6636,"line_start":187,"line_end":187,"column_start":1,"column_end":29}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6608,"byte_end":6636,"line_start":187,"line_end":187,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1280},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6918,"byte_end":6921,"line_start":195,"line_end":195,"column_start":12,"column_end":15},"name":"new","qualname":"<Compression>::new","value":"fn (level: u32) -> Compression","parent":null,"children":[],"decl_id":null,"docs":" Creates a new description of the compression level with an explicitly\n specified integer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1282},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7102,"byte_end":7106,"line_start":201,"line_end":201,"column_start":12,"column_end":16},"name":"none","qualname":"<Compression>::none","value":"fn () -> Compression","parent":null,"children":[],"decl_id":null,"docs":" No compression is to be performed, this may actually inflate data\n slightly when encoding.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1284},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7216,"byte_end":7220,"line_start":206,"line_end":206,"column_start":12,"column_end":16},"name":"fast","qualname":"<Compression>::fast","value":"fn () -> Compression","parent":null,"children":[],"decl_id":null,"docs":" Optimize for the best speed of encoding.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1286},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7334,"byte_end":7338,"line_start":211,"line_end":211,"column_start":12,"column_end":16},"name":"best","qualname":"<Compression>::best","value":"fn () -> Compression","parent":null,"children":[],"decl_id":null,"docs":" Optimize for the size of data being encoded.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1288},"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7498,"byte_end":7503,"line_start":217,"line_end":217,"column_start":12,"column_end":17},"name":"level","qualname":"<Compression>::level","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns an integer representing the compression level, typically on a\n scale of 0-9\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,98,117,102,114,101,97,100,101,114,46,114,115],"byte_start":8458,"byte_end":8467,"line_start":23,"line_end":23,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,98,117,102,114,101,97,100,101,114,46,114,115],"byte_start":8853,"byte_end":8862,"line_start":38,"line_end":38,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,98,117,102,114,101,97,100,101,114,46,114,115],"byte_start":9189,"byte_end":9198,"line_start":53,"line_end":53,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,98,117,102,114,101,97,100,101,114,46,114,115],"byte_start":9565,"byte_end":9574,"line_start":73,"line_end":73,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,98,117,102,114,101,97,100,101,114,46,114,115],"byte_start":10115,"byte_end":10124,"line_start":90,"line_end":90,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":76},{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,99,114,99,46,114,115],"byte_start":11062,"byte_end":11065,"line_start":27,"line_end":27,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,99,114,99,46,114,115],"byte_start":12233,"byte_end":12242,"line_start":69,"line_end":69,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":106}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,99,114,99,46,114,115],"byte_start":12417,"byte_end":12426,"line_start":79,"line_end":79,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,99,114,99,46,114,115],"byte_start":13063,"byte_end":13072,"line_start":106,"line_end":106,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,99,114,99,46,114,115],"byte_start":13276,"byte_end":13285,"line_start":114,"line_end":114,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":126},{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,99,114,99,46,114,115],"byte_start":13771,"byte_end":13780,"line_start":135,"line_end":135,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,99,114,99,46,114,115],"byte_start":14409,"byte_end":14418,"line_start":162,"line_end":162,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,99,114,99,46,114,115],"byte_start":14610,"byte_end":14619,"line_start":172,"line_end":172,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":148},{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":22285,"byte_end":22299,"line_start":50,"line_end":50,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":22703,"byte_end":22717,"line_start":65,"line_end":65,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":178},{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":186},{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":24282,"byte_end":24296,"line_start":113,"line_end":113,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":24553,"byte_end":24567,"line_start":122,"line_end":122,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":26203,"byte_end":26217,"line_start":180,"line_end":180,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":26474,"byte_end":26488,"line_start":191,"line_end":191,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":208},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":214},{"krate":0,"index":216},{"krate":0,"index":218},{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":28193,"byte_end":28207,"line_start":244,"line_end":244,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":224}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":28466,"byte_end":28480,"line_start":253,"line_end":253,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":228},{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":30067,"byte_end":30081,"line_start":45,"line_end":45,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":30406,"byte_end":30420,"line_start":55,"line_end":55,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":252},{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":32422,"byte_end":32436,"line_start":110,"line_end":110,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":32655,"byte_end":32669,"line_start":119,"line_end":119,"column_start":33,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":266},{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":34204,"byte_end":34218,"line_start":172,"line_end":172,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":272},{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":34835,"byte_end":34849,"line_start":190,"line_end":190,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":278},{"krate":0,"index":280},{"krate":0,"index":282},{"krate":0,"index":284},{"krate":0,"index":286},{"krate":0,"index":288}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":36744,"byte_end":36758,"line_start":242,"line_end":242,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":292}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":36979,"byte_end":36993,"line_start":251,"line_end":251,"column_start":33,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":296},{"krate":0,"index":298}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":38335,"byte_end":38349,"line_start":39,"line_end":39,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":316},{"krate":0,"index":318},{"krate":0,"index":320},{"krate":0,"index":322},{"krate":0,"index":324},{"krate":0,"index":326},{"krate":0,"index":328},{"krate":0,"index":330},{"krate":0,"index":332}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":42984,"byte_end":42998,"line_start":159,"line_end":159,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":336},{"krate":0,"index":338}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":43431,"byte_end":43445,"line_start":177,"line_end":177,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":44921,"byte_end":44935,"line_start":224,"line_end":224,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":346},{"krate":0,"index":348},{"krate":0,"index":350},{"krate":0,"index":352},{"krate":0,"index":354},{"krate":0,"index":356},{"krate":0,"index":358},{"krate":0,"index":360}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":48629,"byte_end":48643,"line_start":324,"line_end":324,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":364},{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":49076,"byte_end":49090,"line_start":342,"line_end":342,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,102,102,105,46,114,115],"byte_start":53600,"byte_end":53613,"line_start":153,"line_end":153,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":396}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,102,102,105,46,114,115],"byte_start":53781,"byte_end":53794,"line_start":159,"line_end":159,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,102,102,105,46,114,115],"byte_start":53964,"byte_end":53977,"line_start":167,"line_end":167,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":404},{"krate":0,"index":406}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,102,102,105,46,114,115],"byte_start":54120,"byte_end":54133,"line_start":175,"line_end":175,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":410}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":72503,"byte_end":72512,"line_start":163,"line_end":163,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":494},{"krate":0,"index":496}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":73540,"byte_end":73549,"line_start":194,"line_end":194,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":500},{"krate":0,"index":502},{"krate":0,"index":504}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":74149,"byte_end":74158,"line_start":214,"line_end":214,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":508}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":74843,"byte_end":74852,"line_start":238,"line_end":238,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":512},{"krate":0,"index":514}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":76231,"byte_end":76240,"line_start":288,"line_end":288,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":518},{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":77613,"byte_end":77622,"line_start":337,"line_end":337,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":524},{"krate":0,"index":526},{"krate":0,"index":528},{"krate":0,"index":530}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":78410,"byte_end":78419,"line_start":362,"line_end":362,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":534}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":79041,"byte_end":79050,"line_start":385,"line_end":385,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":538},{"krate":0,"index":540}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":80931,"byte_end":80945,"line_start":442,"line_end":442,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":544},{"krate":0,"index":546}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":82892,"byte_end":82906,"line_start":506,"line_end":506,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":550},{"krate":0,"index":552},{"krate":0,"index":554},{"krate":0,"index":556}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":83675,"byte_end":83689,"line_start":531,"line_end":531,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":560}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":84217,"byte_end":84231,"line_start":548,"line_end":548,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":564},{"krate":0,"index":566}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":85583,"byte_end":85592,"line_start":44,"line_end":44,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":590}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":86048,"byte_end":86057,"line_start":57,"line_end":57,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":594},{"krate":0,"index":596},{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":86654,"byte_end":86663,"line_start":77,"line_end":77,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":602}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":86803,"byte_end":86812,"line_start":83,"line_end":83,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":606},{"krate":0,"index":608}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":88105,"byte_end":88114,"line_start":132,"line_end":132,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":612}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":88367,"byte_end":88376,"line_start":142,"line_end":142,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":616},{"krate":0,"index":618},{"krate":0,"index":620},{"krate":0,"index":622}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":89131,"byte_end":89140,"line_start":167,"line_end":167,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":626}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":89280,"byte_end":89289,"line_start":173,"line_end":173,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":630},{"krate":0,"index":632}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":91094,"byte_end":91108,"line_start":228,"line_end":228,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":636}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":91458,"byte_end":91472,"line_start":239,"line_end":239,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":640},{"krate":0,"index":642},{"krate":0,"index":644},{"krate":0,"index":646}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":92233,"byte_end":92247,"line_start":264,"line_end":264,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":650}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":92387,"byte_end":92401,"line_start":270,"line_end":270,"column_start":33,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":654},{"krate":0,"index":656}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":93959,"byte_end":93968,"line_start":55,"line_end":55,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":700},{"krate":0,"index":702},{"krate":0,"index":704},{"krate":0,"index":706},{"krate":0,"index":708},{"krate":0,"index":710}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":97168,"byte_end":97177,"line_start":145,"line_end":145,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":714},{"krate":0,"index":716}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":97811,"byte_end":97820,"line_start":169,"line_end":169,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":720}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":98043,"byte_end":98052,"line_start":178,"line_end":178,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":724}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":99494,"byte_end":99503,"line_start":228,"line_end":228,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":730},{"krate":0,"index":732},{"krate":0,"index":734},{"krate":0,"index":736},{"krate":0,"index":738},{"krate":0,"index":740},{"krate":0,"index":742}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":102997,"byte_end":103004,"line_start":330,"line_end":330,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":748}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":103188,"byte_end":103197,"line_start":338,"line_end":338,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":752},{"krate":0,"index":754}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":105114,"byte_end":105123,"line_start":396,"line_end":396,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":758}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":57540,"byte_end":57548,"line_start":30,"line_end":30,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":762},{"krate":0,"index":764},{"krate":0,"index":766},{"krate":0,"index":768},{"krate":0,"index":770},{"krate":0,"index":772}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":60569,"byte_end":60578,"line_start":120,"line_end":120,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":776},{"krate":0,"index":778},{"krate":0,"index":780},{"krate":0,"index":782},{"krate":0,"index":784},{"krate":0,"index":786},{"krate":0,"index":788},{"krate":0,"index":790},{"krate":0,"index":792},{"krate":0,"index":794}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,105,111,46,114,115],"byte_start":108982,"byte_end":108990,"line_start":32,"line_end":32,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":832},{"krate":0,"index":834},{"krate":0,"index":836},{"krate":0,"index":838},{"krate":0,"index":840}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,105,111,46,114,115],"byte_start":109610,"byte_end":109620,"line_start":58,"line_end":58,"column_start":14,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":844},{"krate":0,"index":846},{"krate":0,"index":848},{"krate":0,"index":850},{"krate":0,"index":852}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,105,111,46,114,115],"byte_start":110318,"byte_end":110331,"line_start":90,"line_end":90,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":864},{"krate":0,"index":866},{"krate":0,"index":868}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,105,111,46,114,115],"byte_start":110532,"byte_end":110547,"line_start":104,"line_end":104,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":872},{"krate":0,"index":874},{"krate":0,"index":876}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,105,111,46,114,115],"byte_start":112143,"byte_end":112149,"line_start":159,"line_end":159,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":882},{"krate":0,"index":884},{"krate":0,"index":886},{"krate":0,"index":888},{"krate":0,"index":890},{"krate":0,"index":892},{"krate":0,"index":894},{"krate":0,"index":896},{"krate":0,"index":898}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,105,111,46,114,115],"byte_start":115168,"byte_end":115174,"line_start":254,"line_end":254,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":902},{"krate":0,"index":904}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,105,111,46,114,115],"byte_start":116202,"byte_end":116208,"line_start":284,"line_end":284,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":908}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":117976,"byte_end":117982,"line_start":54,"line_end":54,"column_start":36,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":118024,"byte_end":118030,"line_start":55,"line_end":55,"column_start":36,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":121769,"byte_end":121784,"line_start":150,"line_end":150,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":942}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":123347,"byte_end":123355,"line_start":194,"line_end":194,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":946},{"krate":0,"index":948},{"krate":0,"index":950},{"krate":0,"index":952},{"krate":0,"index":954},{"krate":0,"index":956}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":129495,"byte_end":129505,"line_start":355,"line_end":355,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":960},{"krate":0,"index":962},{"krate":0,"index":964},{"krate":0,"index":966},{"krate":0,"index":968},{"krate":0,"index":970},{"krate":0,"index":972}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":136298,"byte_end":136313,"line_start":533,"line_end":533,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":976}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":136434,"byte_end":136439,"line_start":539,"line_end":539,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":980}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":136574,"byte_end":136589,"line_start":545,"line_end":545,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":984}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":136709,"byte_end":136722,"line_start":551,"line_end":551,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":988}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":136839,"byte_end":136844,"line_start":557,"line_end":557,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":992}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":136977,"byte_end":136990,"line_start":563,"line_end":563,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":996}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":137114,"byte_end":137125,"line_start":569,"line_end":569,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1000}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":137252,"byte_end":137265,"line_start":574,"line_end":574,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1004}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":137402,"byte_end":137408,"line_start":580,"line_end":580,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1008}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":149079,"byte_end":149090,"line_start":46,"line_end":46,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1030}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":149483,"byte_end":149494,"line_start":61,"line_end":61,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1036},{"krate":0,"index":1038},{"krate":0,"index":1040},{"krate":0,"index":1042},{"krate":0,"index":1044},{"krate":0,"index":1046}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":151059,"byte_end":151070,"line_start":109,"line_end":109,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1050}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":151324,"byte_end":151335,"line_start":118,"line_end":118,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1054},{"krate":0,"index":1056}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":152840,"byte_end":152851,"line_start":174,"line_end":174,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1060}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":153201,"byte_end":153212,"line_start":189,"line_end":189,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1066},{"krate":0,"index":1068},{"krate":0,"index":1070},{"krate":0,"index":1072},{"krate":0,"index":1074},{"krate":0,"index":1076}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":154670,"byte_end":154681,"line_start":234,"line_end":234,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1080}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":154937,"byte_end":154948,"line_start":243,"line_end":243,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1084},{"krate":0,"index":1086}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":156409,"byte_end":156420,"line_start":42,"line_end":42,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1100}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":156736,"byte_end":156747,"line_start":52,"line_end":52,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1104},{"krate":0,"index":1106},{"krate":0,"index":1108},{"krate":0,"index":1110},{"krate":0,"index":1112},{"krate":0,"index":1114}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":158749,"byte_end":158760,"line_start":107,"line_end":107,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1118}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":158976,"byte_end":158987,"line_start":116,"line_end":116,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1122},{"krate":0,"index":1124}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":160483,"byte_end":160494,"line_start":171,"line_end":171,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1128},{"krate":0,"index":1130}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":161111,"byte_end":161122,"line_start":189,"line_end":189,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1134},{"krate":0,"index":1136},{"krate":0,"index":1138},{"krate":0,"index":1140},{"krate":0,"index":1142},{"krate":0,"index":1144}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":163017,"byte_end":163028,"line_start":241,"line_end":241,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1148}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":163246,"byte_end":163257,"line_start":250,"line_end":250,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1152},{"krate":0,"index":1154}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":164614,"byte_end":164625,"line_start":40,"line_end":40,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1172},{"krate":0,"index":1174},{"krate":0,"index":1176},{"krate":0,"index":1178},{"krate":0,"index":1180},{"krate":0,"index":1182},{"krate":0,"index":1184},{"krate":0,"index":1186},{"krate":0,"index":1188}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":169190,"byte_end":169201,"line_start":159,"line_end":159,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1192},{"krate":0,"index":1194}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":169623,"byte_end":169634,"line_start":177,"line_end":177,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1198}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":171070,"byte_end":171081,"line_start":226,"line_end":226,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1202},{"krate":0,"index":1204},{"krate":0,"index":1206},{"krate":0,"index":1208},{"krate":0,"index":1210},{"krate":0,"index":1212},{"krate":0,"index":1214},{"krate":0,"index":1216}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":174636,"byte_end":174647,"line_start":323,"line_end":323,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1220},{"krate":0,"index":1222}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":175077,"byte_end":175088,"line_start":341,"line_end":341,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1226}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6643,"byte_end":6654,"line_start":189,"line_end":189,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1280},{"krate":0,"index":1282},{"krate":0,"index":1284},{"krate":0,"index":1286},{"krate":0,"index":1288}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7561,"byte_end":7572,"line_start":222,"line_end":222,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1292}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,98,117,102,114,101,97,100,101,114,46,114,115],"byte_start":8458,"byte_end":8467,"line_start":23,"line_end":23,"column_start":31,"column_end":40},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":48},"to":{"krate":2,"index":7834}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,98,117,102,114,101,97,100,101,114,46,114,115],"byte_start":8853,"byte_end":8862,"line_start":38,"line_end":38,"column_start":15,"column_end":24},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":48},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,98,117,102,114,101,97,100,101,114,46,114,115],"byte_start":9189,"byte_end":9198,"line_start":53,"line_end":53,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":48},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,98,117,102,114,101,97,100,101,114,46,114,115],"byte_start":9565,"byte_end":9574,"line_start":73,"line_end":73,"column_start":24,"column_end":33},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":48},"to":{"krate":1,"index":4218}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,98,117,102,114,101,97,100,101,114,46,114,115],"byte_start":10115,"byte_end":10124,"line_start":90,"line_end":90,"column_start":27,"column_end":36},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":48},"to":{"krate":1,"index":4272}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,99,114,99,46,114,115],"byte_start":11062,"byte_end":11065,"line_start":27,"line_end":27,"column_start":6,"column_end":9},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":1294},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,99,114,99,46,114,115],"byte_start":12233,"byte_end":12242,"line_start":69,"line_end":69,"column_start":15,"column_end":24},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":1300},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,99,114,99,46,114,115],"byte_start":12417,"byte_end":12426,"line_start":79,"line_end":79,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":1300},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,99,114,99,46,114,115],"byte_start":13063,"byte_end":13072,"line_start":106,"line_end":106,"column_start":24,"column_end":33},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":1300},"to":{"krate":1,"index":4218}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,99,114,99,46,114,115],"byte_start":13276,"byte_end":13285,"line_start":114,"line_end":114,"column_start":30,"column_end":39},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":1300},"to":{"krate":1,"index":4272}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,99,114,99,46,114,115],"byte_start":13771,"byte_end":13780,"line_start":135,"line_end":135,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":1306},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,99,114,99,46,114,115],"byte_start":14409,"byte_end":14418,"line_start":162,"line_end":162,"column_start":16,"column_end":25},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":1306},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,99,114,99,46,114,115],"byte_start":14610,"byte_end":14619,"line_start":172,"line_end":172,"column_start":26,"column_end":35},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":1306},"to":{"krate":1,"index":4248}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":22285,"byte_end":22299,"line_start":50,"line_end":50,"column_start":18,"column_end":32},"kind":{"variant":"Impl","fields":[13]},"from":{"krate":0,"index":1312},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":22703,"byte_end":22717,"line_start":65,"line_end":65,"column_start":9,"column_end":23},"kind":{"variant":"Impl","fields":[14]},"from":{"krate":0,"index":1312},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":24282,"byte_end":24296,"line_start":113,"line_end":113,"column_start":27,"column_end":41},"kind":{"variant":"Impl","fields":[15]},"from":{"krate":0,"index":1312},"to":{"krate":1,"index":4218}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":24553,"byte_end":24567,"line_start":122,"line_end":122,"column_start":36,"column_end":50},"kind":{"variant":"Impl","fields":[16]},"from":{"krate":0,"index":1312},"to":{"krate":1,"index":4248}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":26203,"byte_end":26217,"line_start":180,"line_end":180,"column_start":18,"column_end":32},"kind":{"variant":"Impl","fields":[17]},"from":{"krate":0,"index":1318},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":26474,"byte_end":26488,"line_start":191,"line_end":191,"column_start":9,"column_end":23},"kind":{"variant":"Impl","fields":[18]},"from":{"krate":0,"index":1318},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":28193,"byte_end":28207,"line_start":244,"line_end":244,"column_start":27,"column_end":41},"kind":{"variant":"Impl","fields":[19]},"from":{"krate":0,"index":1318},"to":{"krate":1,"index":4218}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":28466,"byte_end":28480,"line_start":253,"line_end":253,"column_start":36,"column_end":50},"kind":{"variant":"Impl","fields":[20]},"from":{"krate":0,"index":1318},"to":{"krate":1,"index":4248}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":30067,"byte_end":30081,"line_start":45,"line_end":45,"column_start":15,"column_end":29},"kind":{"variant":"Impl","fields":[21]},"from":{"krate":0,"index":1324},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":30406,"byte_end":30420,"line_start":55,"line_end":55,"column_start":9,"column_end":23},"kind":{"variant":"Impl","fields":[22]},"from":{"krate":0,"index":1324},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":32422,"byte_end":32436,"line_start":110,"line_end":110,"column_start":24,"column_end":38},"kind":{"variant":"Impl","fields":[23]},"from":{"krate":0,"index":1324},"to":{"krate":1,"index":4218}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":32655,"byte_end":32669,"line_start":119,"line_end":119,"column_start":33,"column_end":47},"kind":{"variant":"Impl","fields":[24]},"from":{"krate":0,"index":1324},"to":{"krate":1,"index":4248}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":34204,"byte_end":34218,"line_start":172,"line_end":172,"column_start":15,"column_end":29},"kind":{"variant":"Impl","fields":[25]},"from":{"krate":0,"index":1330},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":34835,"byte_end":34849,"line_start":190,"line_end":190,"column_start":9,"column_end":23},"kind":{"variant":"Impl","fields":[26]},"from":{"krate":0,"index":1330},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":36744,"byte_end":36758,"line_start":242,"line_end":242,"column_start":24,"column_end":38},"kind":{"variant":"Impl","fields":[27]},"from":{"krate":0,"index":1330},"to":{"krate":1,"index":4218}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":36979,"byte_end":36993,"line_start":251,"line_end":251,"column_start":33,"column_end":47},"kind":{"variant":"Impl","fields":[28]},"from":{"krate":0,"index":1330},"to":{"krate":1,"index":4248}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":38335,"byte_end":38349,"line_start":39,"line_end":39,"column_start":16,"column_end":30},"kind":{"variant":"Impl","fields":[29]},"from":{"krate":0,"index":1336},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":42984,"byte_end":42998,"line_start":159,"line_end":159,"column_start":26,"column_end":40},"kind":{"variant":"Impl","fields":[30]},"from":{"krate":0,"index":1336},"to":{"krate":1,"index":4248}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":43431,"byte_end":43445,"line_start":177,"line_end":177,"column_start":32,"column_end":46},"kind":{"variant":"Impl","fields":[31]},"from":{"krate":0,"index":1336},"to":{"krate":1,"index":4218}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":44921,"byte_end":44935,"line_start":224,"line_end":224,"column_start":16,"column_end":30},"kind":{"variant":"Impl","fields":[32]},"from":{"krate":0,"index":1342},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":48629,"byte_end":48643,"line_start":324,"line_end":324,"column_start":26,"column_end":40},"kind":{"variant":"Impl","fields":[33]},"from":{"krate":0,"index":1342},"to":{"krate":1,"index":4248}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":49076,"byte_end":49090,"line_start":342,"line_end":342,"column_start":32,"column_end":46},"kind":{"variant":"Impl","fields":[34]},"from":{"krate":0,"index":1342},"to":{"krate":1,"index":4218}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,102,102,105,46,114,115],"byte_start":53600,"byte_end":53613,"line_start":153,"line_end":153,"column_start":32,"column_end":45},"kind":{"variant":"Impl","fields":[35]},"from":{"krate":0,"index":392},"to":{"krate":2,"index":7834}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,102,102,105,46,114,115],"byte_start":53781,"byte_end":53794,"line_start":159,"line_end":159,"column_start":22,"column_end":35},"kind":{"variant":"Impl","fields":[36]},"from":{"krate":0,"index":392},"to":{"krate":2,"index":2540}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,102,102,105,46,114,115],"byte_start":53964,"byte_end":53977,"line_start":167,"line_end":167,"column_start":20,"column_end":33},"kind":{"variant":"Impl","fields":[37]},"from":{"krate":0,"index":392},"to":{"krate":2,"index":1882}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,102,102,105,46,114,115],"byte_start":54120,"byte_end":54133,"line_start":175,"line_end":175,"column_start":23,"column_end":36},"kind":{"variant":"Impl","fields":[38]},"from":{"krate":0,"index":392},"to":{"krate":2,"index":1900}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":72503,"byte_end":72512,"line_start":163,"line_end":163,"column_start":18,"column_end":27},"kind":{"variant":"Impl","fields":[39]},"from":{"krate":0,"index":1348},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":73540,"byte_end":73549,"line_start":194,"line_end":194,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[40]},"from":{"krate":0,"index":1348},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":74149,"byte_end":74158,"line_start":214,"line_end":214,"column_start":27,"column_end":36},"kind":{"variant":"Impl","fields":[41]},"from":{"krate":0,"index":1348},"to":{"krate":1,"index":4218}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":74843,"byte_end":74852,"line_start":238,"line_end":238,"column_start":36,"column_end":45},"kind":{"variant":"Impl","fields":[42]},"from":{"krate":0,"index":1348},"to":{"krate":1,"index":4248}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":76231,"byte_end":76240,"line_start":288,"line_end":288,"column_start":18,"column_end":27},"kind":{"variant":"Impl","fields":[43]},"from":{"krate":0,"index":1354},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":77613,"byte_end":77622,"line_start":337,"line_end":337,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[44]},"from":{"krate":0,"index":1354},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":78410,"byte_end":78419,"line_start":362,"line_end":362,"column_start":27,"column_end":36},"kind":{"variant":"Impl","fields":[45]},"from":{"krate":0,"index":1354},"to":{"krate":1,"index":4218}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":79041,"byte_end":79050,"line_start":385,"line_end":385,"column_start":36,"column_end":45},"kind":{"variant":"Impl","fields":[46]},"from":{"krate":0,"index":1354},"to":{"krate":1,"index":4248}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":80931,"byte_end":80945,"line_start":442,"line_end":442,"column_start":18,"column_end":32},"kind":{"variant":"Impl","fields":[47]},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":82892,"byte_end":82906,"line_start":506,"line_end":506,"column_start":9,"column_end":23},"kind":{"variant":"Impl","fields":[48]},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":83675,"byte_end":83689,"line_start":531,"line_end":531,"column_start":27,"column_end":41},"kind":{"variant":"Impl","fields":[49]},"from":{"krate":0,"index":1360},"to":{"krate":1,"index":4218}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":84217,"byte_end":84231,"line_start":548,"line_end":548,"column_start":36,"column_end":50},"kind":{"variant":"Impl","fields":[50]},"from":{"krate":0,"index":1360},"to":{"krate":1,"index":4248}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":85583,"byte_end":85592,"line_start":44,"line_end":44,"column_start":15,"column_end":24},"kind":{"variant":"Impl","fields":[51]},"from":{"krate":0,"index":1366},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":86048,"byte_end":86057,"line_start":57,"line_end":57,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[52]},"from":{"krate":0,"index":1366},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":86654,"byte_end":86663,"line_start":77,"line_end":77,"column_start":24,"column_end":33},"kind":{"variant":"Impl","fields":[53]},"from":{"krate":0,"index":1366},"to":{"krate":1,"index":4218}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":86803,"byte_end":86812,"line_start":83,"line_end":83,"column_start":33,"column_end":42},"kind":{"variant":"Impl","fields":[54]},"from":{"krate":0,"index":1366},"to":{"krate":1,"index":4248}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":88105,"byte_end":88114,"line_start":132,"line_end":132,"column_start":15,"column_end":24},"kind":{"variant":"Impl","fields":[55]},"from":{"krate":0,"index":1372},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":88367,"byte_end":88376,"line_start":142,"line_end":142,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[56]},"from":{"krate":0,"index":1372},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":89131,"byte_end":89140,"line_start":167,"line_end":167,"column_start":24,"column_end":33},"kind":{"variant":"Impl","fields":[57]},"from":{"krate":0,"index":1372},"to":{"krate":1,"index":4218}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":89280,"byte_end":89289,"line_start":173,"line_end":173,"column_start":33,"column_end":42},"kind":{"variant":"Impl","fields":[58]},"from":{"krate":0,"index":1372},"to":{"krate":1,"index":4248}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":91094,"byte_end":91108,"line_start":228,"line_end":228,"column_start":15,"column_end":29},"kind":{"variant":"Impl","fields":[59]},"from":{"krate":0,"index":1378},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":91458,"byte_end":91472,"line_start":239,"line_end":239,"column_start":9,"column_end":23},"kind":{"variant":"Impl","fields":[60]},"from":{"krate":0,"index":1378},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":92233,"byte_end":92247,"line_start":264,"line_end":264,"column_start":24,"column_end":38},"kind":{"variant":"Impl","fields":[61]},"from":{"krate":0,"index":1378},"to":{"krate":1,"index":4218}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":92387,"byte_end":92401,"line_start":270,"line_end":270,"column_start":33,"column_end":47},"kind":{"variant":"Impl","fields":[62]},"from":{"krate":0,"index":1378},"to":{"krate":1,"index":4248}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":93959,"byte_end":93968,"line_start":55,"line_end":55,"column_start":16,"column_end":25},"kind":{"variant":"Impl","fields":[63]},"from":{"krate":0,"index":1384},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":97168,"byte_end":97177,"line_start":145,"line_end":145,"column_start":26,"column_end":35},"kind":{"variant":"Impl","fields":[64]},"from":{"krate":0,"index":1384},"to":{"krate":1,"index":4248}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":97811,"byte_end":97820,"line_start":169,"line_end":169,"column_start":32,"column_end":41},"kind":{"variant":"Impl","fields":[65]},"from":{"krate":0,"index":1384},"to":{"krate":1,"index":4218}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":98043,"byte_end":98052,"line_start":178,"line_end":178,"column_start":25,"column_end":34},"kind":{"variant":"Impl","fields":[66]},"from":{"krate":0,"index":1384},"to":{"krate":2,"index":1910}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":99494,"byte_end":99503,"line_start":228,"line_end":228,"column_start":16,"column_end":25},"kind":{"variant":"Impl","fields":[67]},"from":{"krate":0,"index":1390},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":102997,"byte_end":103004,"line_start":330,"line_end":330,"column_start":24,"column_end":31},"kind":{"variant":"Impl","fields":[68]},"from":{"krate":0,"index":744},"to":{"krate":1,"index":4218}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":103188,"byte_end":103197,"line_start":338,"line_end":338,"column_start":26,"column_end":35},"kind":{"variant":"Impl","fields":[69]},"from":{"krate":0,"index":1390},"to":{"krate":1,"index":4248}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":105114,"byte_end":105123,"line_start":396,"line_end":396,"column_start":32,"column_end":41},"kind":{"variant":"Impl","fields":[70]},"from":{"krate":0,"index":1390},"to":{"krate":1,"index":4218}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":57540,"byte_end":57548,"line_start":30,"line_end":30,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[71]},"from":{"krate":0,"index":1396},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":60569,"byte_end":60578,"line_start":120,"line_end":120,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[72]},"from":{"krate":0,"index":1412},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,105,111,46,114,115],"byte_start":108982,"byte_end":108990,"line_start":32,"line_end":32,"column_start":14,"column_end":22},"kind":{"variant":"Impl","fields":[73]},"from":{"krate":0,"index":1424},"to":{"krate":0,"index":818}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,105,111,46,114,115],"byte_start":109610,"byte_end":109620,"line_start":58,"line_end":58,"column_start":14,"column_end":24},"kind":{"variant":"Impl","fields":[74]},"from":{"krate":0,"index":1430},"to":{"krate":0,"index":818}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,105,111,46,114,115],"byte_start":110318,"byte_end":110331,"line_start":90,"line_end":90,"column_start":16,"column_end":29},"kind":{"variant":"Impl","fields":[75]},"from":{"krate":0,"index":1454},"to":{"krate":0,"index":854}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,105,111,46,114,115],"byte_start":110532,"byte_end":110547,"line_start":104,"line_end":104,"column_start":16,"column_end":31},"kind":{"variant":"Impl","fields":[76]},"from":{"krate":0,"index":1474},"to":{"krate":0,"index":854}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,105,111,46,114,115],"byte_start":112143,"byte_end":112149,"line_start":159,"line_end":159,"column_start":24,"column_end":30},"kind":{"variant":"Impl","fields":[77]},"from":{"krate":0,"index":1418},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,105,111,46,114,115],"byte_start":115168,"byte_end":115174,"line_start":254,"line_end":254,"column_start":34,"column_end":40},"kind":{"variant":"Impl","fields":[78]},"from":{"krate":0,"index":1418},"to":{"krate":1,"index":4248}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,105,111,46,114,115],"byte_start":116202,"byte_end":116208,"line_start":284,"line_end":284,"column_start":33,"column_end":39},"kind":{"variant":"Impl","fields":[79]},"from":{"krate":0,"index":1418},"to":{"krate":2,"index":1910}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":117976,"byte_end":117982,"line_start":54,"line_end":54,"column_start":36,"column_end":42},"kind":{"variant":"Impl","fields":[80]},"from":{"krate":0,"index":1436},"to":{"krate":2,"index":1638}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":118024,"byte_end":118030,"line_start":55,"line_end":55,"column_start":36,"column_end":42},"kind":{"variant":"Impl","fields":[81]},"from":{"krate":0,"index":1436},"to":{"krate":2,"index":1650}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":121769,"byte_end":121784,"line_start":150,"line_end":150,"column_start":6,"column_end":21},"kind":{"variant":"Impl","fields":[82]},"from":{"krate":0,"index":1504},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":123347,"byte_end":123355,"line_start":194,"line_end":194,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[83]},"from":{"krate":0,"index":1424},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":129495,"byte_end":129505,"line_start":355,"line_end":355,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[84]},"from":{"krate":0,"index":1430},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":136298,"byte_end":136313,"line_start":533,"line_end":533,"column_start":16,"column_end":31},"kind":{"variant":"Impl","fields":[85]},"from":{"krate":0,"index":1504},"to":{"krate":1,"index":2338}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":136434,"byte_end":136439,"line_start":539,"line_end":539,"column_start":36,"column_end":41},"kind":{"variant":"Impl","fields":[86]},"from":{"krate":1,"index":3696},"to":{"krate":2,"index":2562}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":136574,"byte_end":136589,"line_start":545,"line_end":545,"column_start":23,"column_end":38},"kind":{"variant":"Impl","fields":[87]},"from":{"krate":0,"index":1504},"to":{"krate":2,"index":7838}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":136709,"byte_end":136722,"line_start":551,"line_end":551,"column_start":16,"column_end":29},"kind":{"variant":"Impl","fields":[88]},"from":{"krate":0,"index":1510},"to":{"krate":1,"index":2338}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":136839,"byte_end":136844,"line_start":557,"line_end":557,"column_start":34,"column_end":39},"kind":{"variant":"Impl","fields":[89]},"from":{"krate":1,"index":3696},"to":{"krate":2,"index":2562}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":136977,"byte_end":136990,"line_start":563,"line_end":563,"column_start":23,"column_end":36},"kind":{"variant":"Impl","fields":[90]},"from":{"krate":0,"index":1510},"to":{"krate":2,"index":7838}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":137114,"byte_end":137125,"line_start":569,"line_end":569,"column_start":20,"column_end":31},"kind":{"variant":"Impl","fields":[91]},"from":{"krate":0,"index":1442},"to":{"krate":0,"index":936}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":137252,"byte_end":137265,"line_start":574,"line_end":574,"column_start":20,"column_end":33},"kind":{"variant":"Impl","fields":[92]},"from":{"krate":0,"index":1448},"to":{"krate":0,"index":936}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,109,101,109,46,114,115],"byte_start":137402,"byte_end":137408,"line_start":580,"line_end":580,"column_start":29,"column_end":35},"kind":{"variant":"Impl","fields":[93]},"from":{"krate":0,"index":1436},"to":{"krate":2,"index":1910}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":149079,"byte_end":149090,"line_start":46,"line_end":46,"column_start":18,"column_end":29},"kind":{"variant":"Impl","fields":[94]},"from":{"krate":0,"index":1536},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":149483,"byte_end":149494,"line_start":61,"line_end":61,"column_start":9,"column_end":20},"kind":{"variant":"Impl","fields":[95]},"from":{"krate":0,"index":1536},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":151059,"byte_end":151070,"line_start":109,"line_end":109,"column_start":27,"column_end":38},"kind":{"variant":"Impl","fields":[96]},"from":{"krate":0,"index":1536},"to":{"krate":1,"index":4218}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":151324,"byte_end":151335,"line_start":118,"line_end":118,"column_start":36,"column_end":47},"kind":{"variant":"Impl","fields":[97]},"from":{"krate":0,"index":1536},"to":{"krate":1,"index":4248}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":152840,"byte_end":152851,"line_start":174,"line_end":174,"column_start":18,"column_end":29},"kind":{"variant":"Impl","fields":[98]},"from":{"krate":0,"index":1542},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":153201,"byte_end":153212,"line_start":189,"line_end":189,"column_start":9,"column_end":20},"kind":{"variant":"Impl","fields":[99]},"from":{"krate":0,"index":1542},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":154670,"byte_end":154681,"line_start":234,"line_end":234,"column_start":27,"column_end":38},"kind":{"variant":"Impl","fields":[100]},"from":{"krate":0,"index":1542},"to":{"krate":1,"index":4218}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":154937,"byte_end":154948,"line_start":243,"line_end":243,"column_start":36,"column_end":47},"kind":{"variant":"Impl","fields":[101]},"from":{"krate":0,"index":1542},"to":{"krate":1,"index":4248}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":156409,"byte_end":156420,"line_start":42,"line_end":42,"column_start":15,"column_end":26},"kind":{"variant":"Impl","fields":[102]},"from":{"krate":0,"index":1548},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":156736,"byte_end":156747,"line_start":52,"line_end":52,"column_start":9,"column_end":20},"kind":{"variant":"Impl","fields":[103]},"from":{"krate":0,"index":1548},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":158749,"byte_end":158760,"line_start":107,"line_end":107,"column_start":24,"column_end":35},"kind":{"variant":"Impl","fields":[104]},"from":{"krate":0,"index":1548},"to":{"krate":1,"index":4218}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":158976,"byte_end":158987,"line_start":116,"line_end":116,"column_start":33,"column_end":44},"kind":{"variant":"Impl","fields":[105]},"from":{"krate":0,"index":1548},"to":{"krate":1,"index":4248}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":160483,"byte_end":160494,"line_start":171,"line_end":171,"column_start":15,"column_end":26},"kind":{"variant":"Impl","fields":[106]},"from":{"krate":0,"index":1554},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":161111,"byte_end":161122,"line_start":189,"line_end":189,"column_start":9,"column_end":20},"kind":{"variant":"Impl","fields":[107]},"from":{"krate":0,"index":1554},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":163017,"byte_end":163028,"line_start":241,"line_end":241,"column_start":24,"column_end":35},"kind":{"variant":"Impl","fields":[108]},"from":{"krate":0,"index":1554},"to":{"krate":1,"index":4218}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":163246,"byte_end":163257,"line_start":250,"line_end":250,"column_start":33,"column_end":44},"kind":{"variant":"Impl","fields":[109]},"from":{"krate":0,"index":1554},"to":{"krate":1,"index":4248}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":164614,"byte_end":164625,"line_start":40,"line_end":40,"column_start":16,"column_end":27},"kind":{"variant":"Impl","fields":[110]},"from":{"krate":0,"index":1560},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":169190,"byte_end":169201,"line_start":159,"line_end":159,"column_start":26,"column_end":37},"kind":{"variant":"Impl","fields":[111]},"from":{"krate":0,"index":1560},"to":{"krate":1,"index":4248}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":169623,"byte_end":169634,"line_start":177,"line_end":177,"column_start":32,"column_end":43},"kind":{"variant":"Impl","fields":[112]},"from":{"krate":0,"index":1560},"to":{"krate":1,"index":4218}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":171070,"byte_end":171081,"line_start":226,"line_end":226,"column_start":16,"column_end":27},"kind":{"variant":"Impl","fields":[113]},"from":{"krate":0,"index":1566},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":174636,"byte_end":174647,"line_start":323,"line_end":323,"column_start":26,"column_end":37},"kind":{"variant":"Impl","fields":[114]},"from":{"krate":0,"index":1566},"to":{"krate":1,"index":4248}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":175077,"byte_end":175088,"line_start":341,"line_end":341,"column_start":32,"column_end":43},"kind":{"variant":"Impl","fields":[115]},"from":{"krate":0,"index":1566},"to":{"krate":1,"index":4218}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6643,"byte_end":6654,"line_start":189,"line_end":189,"column_start":6,"column_end":17},"kind":{"variant":"Impl","fields":[116]},"from":{"krate":0,"index":1572},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,99,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7561,"byte_end":7572,"line_start":222,"line_end":222,"column_start":18,"column_end":29},"kind":{"variant":"Impl","fields":[117]},"from":{"krate":0,"index":1572},"to":{"krate":2,"index":2540}}]}